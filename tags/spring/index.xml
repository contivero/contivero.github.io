<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Spring on Cristian Ontivero</title><link>https://contivero.github.io/tags/spring/</link><description>Recent content in Spring on Cristian Ontivero</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 26 Apr 2023 07:45:13 +0200</lastBuildDate><atom:link href="https://contivero.github.io/tags/spring/index.xml" rel="self" type="application/rss+xml"/><item><title>Self Proxy Injection Anti-Pattern</title><link>https://contivero.github.io/post/self-proxy-injection-anti-pattern/</link><pubDate>Wed, 26 Apr 2023 07:45:13 +0200</pubDate><guid>https://contivero.github.io/post/self-proxy-injection-anti-pattern/</guid><description>&lt;p>Because of how Spring&amp;rsquo;s implementation of AOP works (i.e. proxies), internal
calls to a method in a proxied bean cannot be intercepted. This is a limitation
of any AOP implementation using dynamic proxies. A way I&amp;rsquo;ve seen used to bypass
this limitation is having an object with a dependency on itself, so that, for
instance, internal calls to methods can also be cached when using a cache
proxy&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. Something like the following:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">ServiceImpl&lt;/span> &lt;span style="color:#a2f;font-weight:bold">implements&lt;/span> Service&lt;span style="color:#666">,&lt;/span> ApplicationContextAware &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> Service cachedService&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> ApplicationContext applicationContext&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> Service &lt;span style="color:#00a000">getCachedService&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">if&lt;/span> &lt;span style="color:#666">(&lt;/span>cachedService &lt;span style="color:#666">=&lt;/span>&lt;span style="color:#666">=&lt;/span> &lt;span style="color:#a2f;font-weight:bold">null&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
cachedService &lt;span style="color:#666">=&lt;/span> applicationContext&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">getBean&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#b44">&amp;#34;Service&amp;#34;&lt;/span>&lt;span style="color:#666">,&lt;/span> Service&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">class&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">return&lt;/span> cachedService&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> Collection&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">?&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span> aCachedMethod&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#080;font-style:italic">/* some expensiven computation of a collection */&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> String &lt;span style="color:#00a000">getSomething&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
Collection&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">?&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span> collection &lt;span style="color:#666">=&lt;/span> getCachedService&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">aCachedMethod&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">return&lt;/span> &lt;span style="color:#080;font-style:italic">/* some computation with the collection */&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Though this might seem ingenious to some, this is essentially a cyclic
dependency. Problems with the previous snippet of code are:&lt;/p>
&lt;ol>
&lt;li>It uses the &lt;a href="https://blog.ploeh.dk/2010/02/03/ServiceLocatorisanAnti-Pattern/">Service Locator anti-pattern&lt;/a>,
manually getting the proxied &lt;code>Service&lt;/code> from the DI container, instead of
getting it injected as a dependency.&lt;/li>
&lt;li>Whoever maintains the code needs to know and remember to use &lt;code>getCachedService()&lt;/code>
instead of using &lt;code>cachedService&lt;/code> directly, which would bypass the cache and could
even result in a &lt;code>NullPointerException&lt;/code>.&lt;/li>
&lt;/ol>
&lt;p>We could tackle (1), and partially (2) by using property injection:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">ServiceImpl&lt;/span> &lt;span style="color:#a2f;font-weight:bold">implements&lt;/span> Service &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> Service cachedService&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">setCachedService&lt;/span>&lt;span style="color:#666">(&lt;/span>Service cachedService&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">this&lt;/span>&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">cachedService&lt;/span> &lt;span style="color:#666">=&lt;/span> cachedService&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> String &lt;span style="color:#00a000">getSomething&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
Collection&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">?&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span> collection &lt;span style="color:#666">=&lt;/span> getCachedService&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">aCachedMethod&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">return&lt;/span> &lt;span style="color:#080;font-style:italic">/* some computation with the collection */&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>However, the problem that you need to know about &lt;code>cachedService&lt;/code> and remember to
use it remains. Also, we cannot make the field final and get it injected with
constructor injection.&lt;/p>
&lt;p>The solution is the same as for any cyclic dependency: split the class. Those
methods that we want to call and be sure are being cached should be in another
class. Then all problems go away:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">ServiceImpl&lt;/span> &lt;span style="color:#a2f;font-weight:bold">implements&lt;/span> Service &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> AnotherService anotherService&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#00a000">ServiceImpl&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#a2f;font-weight:bold">final&lt;/span> AnotherService anotherService&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">this&lt;/span>&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">anotherService&lt;/span> &lt;span style="color:#666">=&lt;/span> anotherService&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> String &lt;span style="color:#00a000">getSomething&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
Collection&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">?&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span> collection &lt;span style="color:#666">=&lt;/span> anotherService&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">aCachedMethod&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">return&lt;/span> &lt;span style="color:#080;font-style:italic">/* some computation with the collection */&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now the only way to call the method needed is through &lt;code>anotherService&lt;/code>, so
it&amp;rsquo;s not possible to miss using it and bypass the caching.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Also suggested for instance &lt;a href="https://stackoverflow.com/questions/13564627/spring-aop-not-working-for-method-call-inside-another-method">here&lt;/a>. &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item></channel></rss>