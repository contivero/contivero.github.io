<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on Cristian Ontivero</title><link>https://contivero.github.io/tags/java/</link><description>Recent content in Java on Cristian Ontivero</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 02 Oct 2022 23:22:00 +0200</lastBuildDate><atom:link href="https://contivero.github.io/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Towards a Typesafe Map</title><link>https://contivero.github.io/post/towards-a-type-safe-map/</link><pubDate>Sun, 02 Oct 2022 23:22:00 +0200</pubDate><guid>https://contivero.github.io/post/towards-a-type-safe-map/</guid><description>&lt;p>Say we want a heterogeneous &lt;code>Map&lt;/code> in java, i.e. a map where the values have
different types. Let&amp;rsquo;s further assume we know the possible keys at compile time.&lt;/p>
&lt;h2 id="barebones-solution">Barebones solution&lt;/h2>
&lt;p>The simplest approach would be having a &lt;code>Map&amp;lt;String, Object&amp;gt;&lt;/code> (or whatever other
key type). We would need to remember which key corresponds to which type, and do
the proper casts:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">String value1 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#666">(&lt;/span>String&lt;span style="color:#666">)&lt;/span> map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">get&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#b44">&amp;#34;someStringKey&amp;#34;&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#0b0;font-weight:bold">boolean&lt;/span> value2 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#666">(&lt;/span>&lt;span style="color:#0b0;font-weight:bold">boolean&lt;/span>&lt;span style="color:#666">)&lt;/span> map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">get&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#b44">&amp;#34;someBooleanKey&amp;#34;&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* etc. */&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is of course error-prone, delegating to the programmer what should be the
task of the compiler.&lt;/p>
&lt;h2 id="introducing-generics-classes-as-keys">Introducing generics: classes as keys&lt;/h2>
&lt;p>A better option is relying on generics for type safety. One such option is
found for instance in Joshua Bloch&amp;rsquo;s Effective Java, Item 33 (Consider typesafe
heterogeneous containers). This looks as follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">HeterogeneousMap&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> Map&lt;span style="color:#666">&amp;lt;&lt;/span>Class&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">?&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">,&lt;/span> Object&lt;span style="color:#666">&amp;gt;&lt;/span> map &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#a2f;font-weight:bold">new&lt;/span> HashMap&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">put&lt;/span>&lt;span style="color:#666">(&lt;/span>Class&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> key&lt;span style="color:#666">,&lt;/span> T value&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">put&lt;/span>&lt;span style="color:#666">(&lt;/span>key&lt;span style="color:#666">,&lt;/span> value&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#00a000">get&lt;/span>&lt;span style="color:#666">(&lt;/span>Class&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> key&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">return&lt;/span> key&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">cast&lt;/span>&lt;span style="color:#666">(&lt;/span>map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">get&lt;/span>&lt;span style="color:#666">(&lt;/span>key&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>With this, we can operate with the map as follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">HeterogeneousMap map &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#a2f;font-weight:bold">new&lt;/span> HeterogeneousMap&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">put&lt;/span>&lt;span style="color:#666">(&lt;/span>Integer&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">class&lt;/span>&lt;span style="color:#666">,&lt;/span> 5&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">put&lt;/span>&lt;span style="color:#666">(&lt;/span>String&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">class&lt;/span>&lt;span style="color:#666">,&lt;/span> &lt;span style="color:#b44">&amp;#34;High&amp;#34;&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
System&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">out&lt;/span>&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">println&lt;/span>&lt;span style="color:#666">(&lt;/span>map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">get&lt;/span>&lt;span style="color:#666">(&lt;/span>String&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">class&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">+&lt;/span> map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">get&lt;/span>&lt;span style="color:#666">(&lt;/span>Integer&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">class&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#080;font-style:italic">// prints: High 5
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This has the limitation that we can have at most one value of each class.&lt;/p>
&lt;h2 id="adding-a-polymorphic-key-type">Adding a polymorphic key type&lt;/h2>
&lt;p>To surmount the previous limitation, we can define a type to act as key which
has one type argument. We can then declare the different instances as public
constants, as a kind of handrolled enum:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">Key&lt;/span>&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">static&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> Key&lt;span style="color:#666">&amp;lt;&lt;/span>Integer&lt;span style="color:#666">&amp;gt;&lt;/span> KEY1 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#a2f;font-weight:bold">new&lt;/span> Key&lt;span style="color:#666">(&lt;/span>Integer&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">class&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">static&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> Key&lt;span style="color:#666">&amp;lt;&lt;/span>Integer&lt;span style="color:#666">&amp;gt;&lt;/span> KEY2 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#a2f;font-weight:bold">new&lt;/span> Key&lt;span style="color:#666">(&lt;/span>Integer&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">class&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">static&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> Key&lt;span style="color:#666">&amp;lt;&lt;/span>String&lt;span style="color:#666">&amp;gt;&lt;/span> KEY3 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#a2f;font-weight:bold">new&lt;/span> Key&lt;span style="color:#666">(&lt;/span>String&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">class&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* etc. */&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#00a000">Key&lt;/span>&lt;span style="color:#666">(&lt;/span>Class&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> v&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span> &lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that the type as such is a &lt;em>phantom type&lt;/em>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>, though it needen&amp;rsquo;t be, as we
could store the class or other values if so desired. With such defintion, our
map implementation would be:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">HeterogeneousMap&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> Map&lt;span style="color:#666">&amp;lt;&lt;/span>Key&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">?&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">,&lt;/span> Object&lt;span style="color:#666">&amp;gt;&lt;/span> map &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#a2f;font-weight:bold">new&lt;/span> HashMap&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">put&lt;/span>&lt;span style="color:#666">(&lt;/span>Key&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> key&lt;span style="color:#666">,&lt;/span> T value&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">put&lt;/span>&lt;span style="color:#666">(&lt;/span>key&lt;span style="color:#666">,&lt;/span> value&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#00a000">get&lt;/span>&lt;span style="color:#666">(&lt;/span>Key&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> key&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">return&lt;/span> key&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">cast&lt;/span>&lt;span style="color:#666">(&lt;/span>map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">get&lt;/span>&lt;span style="color:#666">(&lt;/span>key&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>With such setup, we now can have more than one value with the same type, though
we rely on knowing the different keys at compile-time.&lt;/p>
&lt;h2 id="abstracting-further-simulating-higher-kinded-types">Abstracting further: simulating higher-kinded types&lt;/h2>
&lt;p>Now suppose we want to use instances of this map in different contexts with
different keys. For instance, we could have keys that represent user options:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">UserOption&lt;/span>&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">static&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> UserOption&lt;span style="color:#666">&amp;lt;&lt;/span>String&lt;span style="color:#666">&amp;gt;&lt;/span> TIMEZONE &lt;span style="color:#666">=&lt;/span> create&lt;span style="color:#666">(&lt;/span>String&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">class&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">static&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> UserOption&lt;span style="color:#666">&amp;lt;&lt;/span>String&lt;span style="color:#666">&amp;gt;&lt;/span> LANGUAGE &lt;span style="color:#666">=&lt;/span> create&lt;span style="color:#666">(&lt;/span>String&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">class&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">static&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> UserOption&lt;span style="color:#666">&amp;lt;&lt;/span>WebsiteTheme&lt;span style="color:#666">&amp;gt;&lt;/span> THEME &lt;span style="color:#666">=&lt;/span> create&lt;span style="color:#666">(&lt;/span>WebsiteTheme&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">class&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* etc. */&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#00a000">UserOption&lt;/span>&lt;span style="color:#666">(&lt;/span>Class&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> v&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span> &lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">static&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span>V&lt;span style="color:#666">&amp;gt;&lt;/span> UserOption&lt;span style="color:#666">&amp;lt;&lt;/span>V&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#00a000">create&lt;/span>&lt;span style="color:#666">(&lt;/span>Class&lt;span style="color:#666">&amp;lt;&lt;/span>V&lt;span style="color:#666">&amp;gt;&lt;/span> c&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">return&lt;/span> &lt;span style="color:#a2f;font-weight:bold">new&lt;/span> UserOption&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">(&lt;/span>c&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>and some other keys that represent optional parameters to some service method:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">OptionalParameter&lt;/span>&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">static&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> OptionalParameter&lt;span style="color:#666">&amp;lt;&lt;/span>String&lt;span style="color:#666">&amp;gt;&lt;/span> SOME_PARAM &lt;span style="color:#666">=&lt;/span> create&lt;span style="color:#666">(&lt;/span>String&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">class&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">static&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> OptionalParameter&lt;span style="color:#666">&amp;lt;&lt;/span>Long&lt;span style="color:#666">&amp;gt;&lt;/span> ANOTHER_PARAM &lt;span style="color:#666">=&lt;/span> create&lt;span style="color:#666">(&lt;/span>Long&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">class&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* etc. */&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#00a000">OptionalParameter&lt;/span>&lt;span style="color:#666">(&lt;/span>Class&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> v&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span> &lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">static&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span>V&lt;span style="color:#666">&amp;gt;&lt;/span> OptionalParameter&lt;span style="color:#666">&amp;lt;&lt;/span>V&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#00a000">create&lt;/span>&lt;span style="color:#666">(&lt;/span>Class&lt;span style="color:#666">&amp;lt;&lt;/span>V&lt;span style="color:#666">&amp;gt;&lt;/span> c&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">return&lt;/span> &lt;span style="color:#a2f;font-weight:bold">new&lt;/span> OptionalParameter&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">(&lt;/span>c&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The problem with this is that we need &lt;code>HeterogeneousMap&lt;/code> to be generic on the type of key, something like the following:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">HeterogeneousMap&lt;/span>&lt;span style="color:#666">&amp;lt;&lt;/span>K&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> Map&lt;span style="color:#666">&amp;lt;&lt;/span>K&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">?&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">,&lt;/span> Object&lt;span style="color:#666">&amp;gt;&lt;/span> map &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#a2f;font-weight:bold">new&lt;/span> HashMap&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">put&lt;/span>&lt;span style="color:#666">(&lt;/span>K&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> key&lt;span style="color:#666">,&lt;/span> T value&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">put&lt;/span>&lt;span style="color:#666">(&lt;/span>key&lt;span style="color:#666">,&lt;/span> value&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#00a000">get&lt;/span>&lt;span style="color:#666">(&lt;/span>K&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> key&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">return&lt;/span> key&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">cast&lt;/span>&lt;span style="color:#666">(&lt;/span>map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">get&lt;/span>&lt;span style="color:#666">(&lt;/span>key&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This would then allow us to define a &lt;code>HeterogeneousMap&amp;lt;OptionalParameter&amp;lt;?&amp;gt;&amp;gt;&lt;/code>,
&lt;code>HeterogeneousMap&amp;lt;UserOption&amp;lt;?&amp;gt;&amp;gt;&lt;/code>, etc. Unfortunately this doesn&amp;rsquo;t compile in
java. Java doesn&amp;rsquo;t have higher-kinded types &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>, which is precisely what we
need for this. We can simulate the feature up to a point as follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#080;font-style:italic">/* Marker interface for encoding a type F&amp;lt;T&amp;gt; of kind * -&amp;gt; *. */&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">interface&lt;/span> &lt;span style="color:#00f">H&lt;/span>&lt;span style="color:#666">&amp;lt;&lt;/span>F&lt;span style="color:#666">,&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#666">{&lt;/span>&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">OptionalParameter&lt;/span>&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#a2f;font-weight:bold">implements&lt;/span> H&lt;span style="color:#666">&amp;lt;&lt;/span>OptionalParameter&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">?&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">,&lt;/span> T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#080;font-style:italic">/* the rest is the same as before */&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">UserOption&lt;/span>&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#a2f;font-weight:bold">implements&lt;/span> H&lt;span style="color:#666">&amp;lt;&lt;/span>UserOption&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">?&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">,&lt;/span> T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#080;font-style:italic">/* the rest is the same as before */&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">HeterogeneousMap&lt;/span>&lt;span style="color:#666">&amp;lt;&lt;/span>S &lt;span style="color:#a2f;font-weight:bold">extends&lt;/span> H&lt;span style="color:#666">&amp;lt;&lt;/span>S&lt;span style="color:#666">,&lt;/span> &lt;span style="color:#666">?&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> Map&lt;span style="color:#666">&amp;lt;&lt;/span>Object&lt;span style="color:#666">,&lt;/span> Object&lt;span style="color:#666">&amp;gt;&lt;/span> map &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#a2f;font-weight:bold">new&lt;/span> HashMap&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span>K &lt;span style="color:#a2f;font-weight:bold">extends&lt;/span> H&lt;span style="color:#666">&amp;lt;&lt;/span>S&lt;span style="color:#666">,&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">,&lt;/span> T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">put&lt;/span>&lt;span style="color:#666">(&lt;/span>K key&lt;span style="color:#666">,&lt;/span> T value&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">put&lt;/span>&lt;span style="color:#666">(&lt;/span>key&lt;span style="color:#666">,&lt;/span> value&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f">@SuppressWarnings&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#b44">&amp;#34;unchecked&amp;#34;&lt;/span>&lt;span style="color:#666">)&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span>K &lt;span style="color:#a2f;font-weight:bold">extends&lt;/span> H&lt;span style="color:#666">&amp;lt;&lt;/span>S&lt;span style="color:#666">,&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">,&lt;/span> T&lt;span style="color:#666">&amp;gt;&lt;/span> T &lt;span style="color:#00a000">get&lt;/span>&lt;span style="color:#666">(&lt;/span>K key&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">return&lt;/span> &lt;span style="color:#666">(&lt;/span>T&lt;span style="color:#666">)&lt;/span> map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">get&lt;/span>&lt;span style="color:#666">(&lt;/span>key&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>With this we&amp;rsquo;ve almost managed to get what we wanted. We can operate with the map as follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">HeterogeneousMap&lt;span style="color:#666">&amp;lt;&lt;/span>UserOption&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">?&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span> map &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#a2f;font-weight:bold">new&lt;/span> HeterogeneousMap&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">put&lt;/span>&lt;span style="color:#666">(&lt;/span>UserOption&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">TIMEZONE&lt;/span>&lt;span style="color:#666">,&lt;/span> &lt;span style="color:#b44">&amp;#34;America/Argentina/Buenos_Aires&amp;#34;&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">put&lt;/span>&lt;span style="color:#666">(&lt;/span>UserOption&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">THEME&lt;/span>&lt;span style="color:#666">,&lt;/span> WebsiteTheme&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">DARK&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
String timezone &lt;span style="color:#666">=&lt;/span> map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">get&lt;/span>&lt;span style="color:#666">(&lt;/span>UserOption&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">TIMEZONE&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
WebsiteTheme theme &lt;span style="color:#666">=&lt;/span> map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">get&lt;/span>&lt;span style="color:#666">(&lt;/span>UserOption&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">THEME&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* etc. */&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>as can be seen, we can put stuff into the map using the &lt;code>UserOption&lt;/code> constants, and don&amp;rsquo;t need any casting when getting values out.
Additionally, none of the following compile:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#080;font-style:italic">/* Putting a value of the wrong type for the given key */&lt;/span>
map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">put&lt;/span>&lt;span style="color:#666">(&lt;/span>UserOption&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">TIMEZONE&lt;/span>&lt;span style="color:#666">,&lt;/span> 3&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* Getting a value of the wrong type from the map */&lt;/span>
String timezone &lt;span style="color:#666">=&lt;/span> map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">get&lt;/span>&lt;span style="color:#666">(&lt;/span>UserOption&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">THEME&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* Wrong key type. Though SOME_PARAM represents a string parameter, we declared
&lt;/span>&lt;span style="color:#080;font-style:italic"> * the map for UserOption, not for OptionalParameter */&lt;/span>
map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">put&lt;/span>&lt;span style="color:#666">(&lt;/span>OptionalParameter&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">SOME_PARAM&lt;/span>&lt;span style="color:#666">,&lt;/span> &lt;span style="color:#b44">&amp;#34;extraString&amp;#34;&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* As before, the map was declared for UserOption, so we cannot use
&lt;/span>&lt;span style="color:#080;font-style:italic"> * OptionalParameter as key */&lt;/span>
String extraParam &lt;span style="color:#666">=&lt;/span> map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">get&lt;/span>&lt;span style="color:#666">(&lt;/span>OptionalParameter&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">SOME_PARAM&lt;/span>&lt;span style="color:#666">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The limitation with this is that we have no way of enforcing that a type
implements &lt;code>H&lt;/code> the right way. As an example, we could have:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">OptionalParameter&lt;/span>&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#a2f;font-weight:bold">implements&lt;/span> H&lt;span style="color:#666">&amp;lt;&lt;/span>UserOption&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">?&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">,&lt;/span> T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#080;font-style:italic">/* the rest is the same as before */&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">HeterogeneousMap&lt;span style="color:#666">&amp;lt;&lt;/span>UserOption&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">?&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span> map &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#a2f;font-weight:bold">new&lt;/span> HeterogeneousMap&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">put&lt;/span>&lt;span style="color:#666">(&lt;/span>OptionalParameter&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">INTEGER_PARAM&lt;/span>&lt;span style="color:#666">,&lt;/span> 3&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">get&lt;/span>&lt;span style="color:#666">(&lt;/span>OptionalParameter&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">INTEGER_PARAM&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In other words, we&amp;rsquo;ve managed to use keys of type &lt;code>OptionalParameter&lt;/code> in a
map meant for &lt;code>UserOption&lt;/code> keys. It is possible to avoid this by using an
annotation processor to prohibit (having a compilation error) a type &lt;code>T&lt;/code>
implementing &lt;code>H&lt;/code> with an argument other than itself. This is what projects such
as &lt;a href="https://github.com/derive4j/hkt">derive4j/hkt&lt;/a> do, but I won&amp;rsquo;t go now
further in that direction.&lt;/p>
&lt;p>The technique is still useful as is, for instance when one controls the code and
knows to abide by the restriction that whenever a new type &lt;code>K&amp;lt;T&amp;gt;&lt;/code> of key wants
to be used, that type needs to implement &lt;code>H&amp;lt;K&amp;lt;?&amp;gt;,T&amp;gt;&lt;/code>.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>A phantom type is a type with a type parameter which isn&amp;rsquo;t used (in
methods nor fields). The definition might change slightly based on the language
where it&amp;rsquo;s used, but the gist is the same. Their use is known in languages such
as Haskell and Rust, though Java supports them too. &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Kind_(type_theory)">https://en.wikipedia.org/wiki/Kind_(type_theory)&lt;/a> &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Thoughts on static methods</title><link>https://contivero.github.io/post/thoughts-on-static-methods/</link><pubDate>Mon, 15 Aug 2022 08:00:00 +0200</pubDate><guid>https://contivero.github.io/post/thoughts-on-static-methods/</guid><description>&lt;p>I&amp;rsquo;ve had to argue more than once why I&amp;rsquo;m making some method static, so I decided
to write it down.&lt;/p>
&lt;p>Methods that use no instance variables should be made static. Making the
method static restricts its possibilities, making it easier to reason about.
It&amp;rsquo;s more restricted in the sense that it&amp;rsquo;s impossible for it to mutate any
instance variable of the class where it&amp;rsquo;s defined. If it&amp;rsquo;s static:&lt;/p>
&lt;ol>
&lt;li>You know it doesn&amp;rsquo;t reference any state of the class where it&amp;rsquo;s
defined; it can&amp;rsquo;t.&lt;/li>
&lt;li>It&amp;rsquo;s highly likely it has no side-effect on the object where it&amp;rsquo;s defined.
Sure, it could be mutating some static field, but that would most likely be
terrible design, so one can usually discard that. It&amp;rsquo;s also possible that it
mutates state of one of its arguments, so the method need not be side-effect
free. But all that and more is possible with instance methods too.&lt;/li>
&lt;/ol>
&lt;p>All this information is also instantly accessible through the IDE, because most
use italics by default for these methods (this tends to be configurable), so
when seeing the italics you know it&amp;rsquo;s some utility method with those
characteristics.&lt;/p>
&lt;p>It&amp;rsquo;s pointless to require instantiating an object to call a method that makes no
use of that object&amp;rsquo;s state (with the exception of methods meant to be
overriden).&lt;/p>
&lt;p>A lot of the time making a method static also reveals others can be static too
(those calling it), which can end up uncovering a set of methods that makes
sense to extract into a utility class.&lt;/p>
&lt;h2 id="exposing-temporal-coupling">Exposing temporal coupling&lt;/h2>
&lt;p>Static methods also make explicit any &lt;em>temporal coupling&lt;/em>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. As a rough example,
say you have the following:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">SomeClass&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> Map&lt;span style="color:#666">&amp;lt;&lt;/span>String&lt;span style="color:#666">,&lt;/span> String&lt;span style="color:#666">&amp;gt;&lt;/span> map &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#a2f;font-weight:bold">new&lt;/span> HashMap&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">someMethod&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#080;font-style:italic">/* ... some code ... */&lt;/span>
computeMapEntries&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* ... a bunch of other code ... */&lt;/span>
doSomethingWithMap&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">computeMapEntries&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span> &lt;span style="color:#080;font-style:italic">/* something */&lt;/span> &lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">doSomethingWithMap&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span> &lt;span style="color:#080;font-style:italic">/* something */&lt;/span> &lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In such a code, having the map entries computed is a prerequisite for calling
&lt;code>doSomethingWithMap()&lt;/code>, which will use those values. There is thus a temporal
coupling between both methods, but this is nowhere specified nor enforced. It
could be that as part of future changes, someone reorders the calls and
introduces a bug. If, however, &lt;code>doSomethingWithMap()&lt;/code> took the map as a
parameter, then the dependency is made explicit. Assuming no other instance
field needs to be accessed, then &lt;code>doSomethingWithMap()&lt;/code> can be static, which
would enforce the dependency (the implementation cannot unexpectedly reference
the map nor any other such field). We might then be able also to avoid defining
&lt;code>map&lt;/code> as an instance variable entirely and instead declare it only inside
&lt;code>someMethod()&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">SomeClass&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">someMethod&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#080;font-style:italic">/* ... some code ... */&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">final&lt;/span> Map&lt;span style="color:#666">&amp;lt;&lt;/span>String&lt;span style="color:#666">,&lt;/span> String&lt;span style="color:#666">&amp;gt;&lt;/span> map &lt;span style="color:#666">=&lt;/span> computeMapEntries&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* ... a bunch of other code ... */&lt;/span>
doSomethingWithMap&lt;span style="color:#666">(&lt;/span>map&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> Map&lt;span style="color:#666">&amp;lt;&lt;/span>String&lt;span style="color:#666">,&lt;/span> String&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#00a000">computeMapEntries&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span> &lt;span style="color:#080;font-style:italic">/* something */&lt;/span> &lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">doSomethingWithMap&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span> &lt;span style="color:#080;font-style:italic">/* something */&lt;/span> &lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>With this, we further reduced the scope of the variable, which helps to avoid
misuses, e.g. by having the IDE suggest it or auto-complete it in a place where
it wasn&amp;rsquo;t meant to be used. In particular, the following doesn&amp;rsquo;t compile anymore:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">doSomethingWithMap&lt;span style="color:#666">(&lt;/span>map&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* ... a bunch of other code ... */&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">final&lt;/span> Map&lt;span style="color:#666">&amp;lt;&lt;/span>String&lt;span style="color:#666">,&lt;/span> String&lt;span style="color:#666">&amp;gt;&lt;/span> map &lt;span style="color:#666">=&lt;/span> computeMapEntries&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="testability">Testability&lt;/h2>
&lt;p>Detractors of static methods sometimes argue that static methods worsen
testability as they cannot be overriden, and they are harder to mock (mocking
frameworks allow mocking static methods, with the downside that those tests
cannot be parallelized.) Why would one mock, for instance, &lt;code>Math.abs&lt;/code>? If the
method is &lt;a href="https://en.wikipedia.org/wiki/Pure_function">pure&lt;/a>, then that&amp;rsquo;s the
best case for testing: you can call the method with a bunch of inputs and assert
the outputs. If the static method uses some mutable dependency (for example a
database, or time such as with &lt;code>LocalDateTime.now()&lt;/code>), then I see why you&amp;rsquo;d want
to mock or somehow change that. But that&amp;rsquo;s because you are doing a bad usage of
a static method and should rethink your design (for instance, by using a
&lt;code>java.time.Clock&lt;/code> and calling &lt;code>LocalDateTime.now(clock)&lt;/code> instead). Also, mocks
should only be used for shared, unmanaged out-of-process dependencies &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>,
and since these dependencies tend to be few, most of the time you actually
shouldn&amp;rsquo;t be mocking.&lt;/p>
&lt;p>I won&amp;rsquo;t spend time here with other arguments such as &amp;ldquo;static methods are not
pure OOP&amp;rdquo;, whatever that means. Also, that presuposes pure OOP-ness is something
desirable.&lt;/p>
&lt;h2 id="instance-vs-static-method">Instance vs. static method&lt;/h2>
&lt;p>All this doesn&amp;rsquo;t mean we should turn all private instance methods into private
static ones by adding each referenced instance field as an argument to the
method. After all, we can always change:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">AnotherClass&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#0b0;font-weight:bold">int&lt;/span> intField&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> String stringField&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> Service service&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">method&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#080;font-style:italic">/* uses intField, stringField and service */&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>into:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">AnotherClass&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#0b0;font-weight:bold">int&lt;/span> intField&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> String stringField&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> Service service&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">static&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">method&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#0b0;font-weight:bold">int&lt;/span> intField&lt;span style="color:#666">,&lt;/span> String stringField&lt;span style="color:#666">,&lt;/span> Service service&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#080;font-style:italic">/* uses intField, stringField and service */&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>and pass the arguments when calling &lt;code>method()&lt;/code>.&lt;/p>
&lt;p>When the referenced state is immutable (e.g. it&amp;rsquo;s a final field which
points to an stateless service initialized on construction), then taking it as
an argument instead of directly referencing it is pointless and more verbose.&lt;/p>
&lt;p>The same is true if the referenced state is always valid, for example when the
object is shared and has some feature flag:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">volatile&lt;/span> &lt;span style="color:#0b0;font-weight:bold">boolean&lt;/span> featureEnabled&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">setFeatureEnabled&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#0b0;font-weight:bold">boolean&lt;/span> featureEnabled&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">this&lt;/span>&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">featureEnabled&lt;/span> &lt;span style="color:#666">=&lt;/span> featureEnabled
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then again, it makes sense to use the field directly in an instance method, as
both boolean states are valid (whether the feature is enabled or not is probably
something that some other thread defines).&lt;/p>
&lt;p>Another obvious case where we cannot make a method static&amp;mdash;even if no state is
used&amp;mdash;is when the method is meant to be overriden by subclasses.&lt;/p>
&lt;p>But these cases aside, I tend to make static any method that doesn&amp;rsquo;t depend on
an object&amp;rsquo;s state. The change can also be suggested, for instance, by Eclipse
(as a warning) or IntelliJ IDEA (as an inspection).&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Sometimes also found as &lt;em>sequential coupling&lt;/em>, temporal coupling goes back
to at least to Hunt and Thomas&amp;rsquo; book &lt;a href="https://en.wikipedia.org/wiki/The_Pragmatic_Programmer">The Pragmatic Programmer&lt;/a>. &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>&lt;a href="https://enterprisecraftsmanship.com/posts/when-to-mock/">When to Mock&lt;/a> &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item></channel></rss>