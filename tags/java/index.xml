<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on Cristian Ontivero</title><link>https://contivero.github.io/tags/java/</link><description>Recent content in Java on Cristian Ontivero</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 02 Aug 2024 00:00:00 -0200</lastBuildDate><atom:link href="https://contivero.github.io/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Stories About Flaky Tests</title><link>https://contivero.github.io/post/stories_about_flaky_tests/</link><pubDate>Fri, 02 Aug 2024 00:00:00 -0200</pubDate><guid>https://contivero.github.io/post/stories_about_flaky_tests/</guid><description>&lt;p>While working on a legacy codebase, I had the chance to track down several
random test failures: tests that worked or not depending on the time of the day,
or depending on the order the test classes were running, etc.&lt;/p>
&lt;p>Following are some such stories.&lt;/p>
&lt;h2 id="test-working-in-the-ide-but-failing-with-maven">Test working in the IDE but failing with maven&lt;/h2>
&lt;p>A test was failing as part of the Jenkins pipeline, but working fine locally
from my IDE. Even reproducing the execution order of the tests as a test suite
wouldn&amp;rsquo;t trigger the problem. Running the tests with maven though did cause it
to fail.&lt;/p>
&lt;p>Unfortunately the assertion&amp;rsquo;s error message wasn&amp;rsquo;t good, but improving it was
enough to pinpoint the issue. After switching the assertion to use AssertJ,
the error was something as follows:&lt;/p>
&lt;pre>
Expecting map:
{"$jacocoData"=[true, false, true, false, true, false, true], "field1"="value1", "field2"=123, "field3"=true}
to contain only:
["field1"="value1", "field3"=true, "field2"=123]
but the following map entries were unexpected:
["$jacocoData"=[true, false, true, false, true, false, true]]
&lt;/pre>
&lt;p>We had recently added Jacoco to our build for code coverage. The problem was
that we were using reflection to get the declared fields of a class, and when
running the tests with Jacoco for code coverage, Jacoco adds a synthetic field
to the class named $jacocoData, which was making the assertion fail. The
solution was simply ignoring synthetic fields, which is in any case good
practice.&lt;/p>
&lt;h2 id="tests-failing-depending-on-execution-speed">Tests failing depending on execution speed&lt;/h2>
&lt;p>Some tests were asserting that the time stored in an entity was strictly before
the time when the assertion ran. When the test was fast enough, the time when
the entity was created and the time when the assertion ran didn&amp;rsquo;t differ,
causing the test to fail. Debugging it would cause it to pass, as running it
with a debugger caused enough of a slowdown that the times always differed.&lt;/p>
&lt;p>This issue is trivially noticed and fixed with the right assertion messages.
If doing, e.g.:&lt;/p>
&lt;pre>&lt;code>assertTrue(LocalDateTime.now().isAfter(entity.getCreationDateTime()));
&lt;/code>&lt;/pre>&lt;p>having the assertion fail doesn&amp;rsquo;t give us a meaningful message. Using AssertJ
with the right methods provides a lot more information. Fixing the assertion
to consider equality:&lt;/p>
&lt;pre>&lt;code>assertThat(entity.getCreationDateTime())
.as(&amp;quot;creationDateTime&amp;quot;)
.isBeforeOrEqualTo(now);
&lt;/code>&lt;/pre>&lt;h2 id="tests-failing-due-to-ehcaches-singleton-cachemanager">Tests failing due to EhCache&amp;rsquo;s singleton CacheManager&lt;/h2>
&lt;p>For a long time we sometimes had a cascade of failing tests saying that a Cache
had been shut down. We noticed that it seemed to be that after some test failed,
something was left in an invalid state and affected subsequent tests. In the
end, what was happening was that the code was using EhCache as a singleton, and
when there was an issue initializing an ApplicationContext, Spring was calling
&lt;code>destroy()&lt;/code> on the &lt;code>CacheManager&lt;/code>. This &lt;code>CacheManager&lt;/code>, being a singleton for
the whole JVM, was reused by any other tests needing it, but had already been
shutdown previously. The final fix was changing the code to use separate
&lt;code>CacheManager&lt;/code> instances per application context.&lt;/p>
&lt;p>Somewhat related, there was a test calling&lt;/p>
&lt;pre>&lt;code>CacheManager cacheManger = CacheManager.create();
cacheManger.removeAllCaches();
&lt;/code>&lt;/pre>&lt;p>&lt;code>CacheManager.create()&lt;/code> reuses the singleton &lt;code>CacheManager&lt;/code> if there is one
(otherwise it creates it), so it was effectively removing all caches for
subsequent tests, also causing issues.&lt;/p>
&lt;h2 id="tests-failing-depending-on-the-date-or-time-of-execution">Tests failing depending on the date or time of execution&lt;/h2>
&lt;p>Dates and time are full of complexity and provide a myriad of pitfalls. The
options usually are two:&lt;/p>
&lt;ol>
&lt;li>Either making it so that the test can always use the current time and work anyway, or&lt;/li>
&lt;li>Use a fixed time by having a &lt;code>java.time.Clock&lt;/code> injected wherever time is
needed, and using a fixed &lt;code>Clock&lt;/code> for the test.&lt;/li>
&lt;/ol>
&lt;h3 id="test-failing-the-29th-of-february">Test failing the 29th of February&lt;/h3>
&lt;p>We had a test for a method that given a birthday date, would return when the
birthday should be on the current year. The test was using the current time and
shifting it a year in the past to construct a date, something as follows:&lt;/p>
&lt;pre>&lt;code>final Date lastYear = DateUtils.addYears(now, -1);
assertEquals(now, DateTools.getBirthdayDate(lastYear));
&lt;/code>&lt;/pre>&lt;p>When running on the 29th of February, the previous year had no 29th of February
(since it&amp;rsquo;s not a leap year); the assertion would then fail because it expected
the birthday date to be today, 29th, but was the 28th.&lt;/p>
&lt;h3 id="test-failing-near-midnight">Test failing near midnight&lt;/h3>
&lt;p>Part of the code was using java&amp;rsquo;s legacy &lt;code>Date&lt;/code> class, and to better support
caching, it was rounding the &lt;code>Date&lt;/code> to the next hour. The idea was that calling
a service method with today at 16:03:00, or at 16:03:01, or at 16:59, would all
hit the same cache entry, instead of each one creating new cache entries but
always missing them.&lt;/p>
&lt;p>The test was assigning permissions to a user for some action starting tomorrow,
and at some point asserting that the user did &lt;em>not&lt;/em> have permissions for that
action &lt;em>now&lt;/em> (today). However, the code checking these permissions was using
this rounding logic, so that asking between 23:00 and midnight would return
&lt;code>true&lt;/code> (i.e. that the persons did in fact have permissions today at the time of
running), because when rounding to the next hour, it would end up asking about
permissions on the following day.&lt;/p>
&lt;h3 id="test-failing-only-between-0000-and-0200">Test failing only between 00:00 and 02:00&lt;/h3>
&lt;p>Some tests had been sporadically failing for years without anyone knowing why.
Behind not understanding hides a teaching, so I spent some time to figure it
out. I noticed the failures only happened between 00:00 and 02:00, and could
reproduce this locally by changing the system&amp;rsquo;s clock to a time inside that
range. Having a reproduction, the rest was a matter of time.&lt;/p>
&lt;p>I&amp;rsquo;ll focus on one test, as the others were variations of the same issue.
The test started with creating an entity and asserting that it could be found.
This failed between 00:00 and 02:00.&lt;/p>
&lt;p>The problem was that the entity had a validity (two &lt;code>Date&lt;/code> properties specifying
from when until when that entity was valid), and the service method being used
to find the entity was taking validity into account.&lt;/p>
&lt;p>When creating the entity, it would have as &lt;code>validFrom&lt;/code> the date when the test
was running at start of the day, say &lt;code>2021-09-19 00:00:00.0&lt;/code>. For the HQL query,
the problematic part of the where clause was:&lt;/p>
&lt;pre>&lt;code> validFrom &amp;lt;= current_timestamp()
&lt;/code>&lt;/pre>&lt;p>at first sight, this looks fine. What&amp;rsquo;s the problem? The test was using HSQLDB,
and Hibernate translates &lt;code>current_timestamp()&lt;/code> to HSQLDB&amp;rsquo;s &lt;code>current_timestamp&lt;/code>,
which includes a time zone. Running the test in Vienna with time zone UTC+2
meant the condition would look something as follows:&lt;/p>
&lt;pre>&lt;code> 2021-09-19 00:00:00.0 &amp;lt;= 2021-09-19 00:13:39.611+02
&lt;/code>&lt;/pre>&lt;p>HSQLDB would then take the time zone into account, and use UTC for the
&lt;code>validFrom&lt;/code> date. Shifting to UTC, the condition would look like:&lt;/p>
&lt;pre>&lt;code> 2021-09-19 00:00:00.0 &amp;lt;= 2021-09-18 22:13:39.611
&lt;/code>&lt;/pre>&lt;p>which makes the issue more obvious. The condition was thus true between 02:00
and midnight, making the test normally pass, and false between 00:00 and 02:00,
making it fail during that time.&lt;/p>
&lt;p>The solution was using &lt;code>current_date()&lt;/code> which returns a value of type DATE, i.e.
does not include time zone, but read the next one about &lt;code>current_date()&lt;/code>!&lt;/p>
&lt;h2 id="hql-query-parameter-vs-current_date">HQL Query Parameter vs. &lt;code>current_date()&lt;/code>&lt;/h2>
&lt;p>After some code changes a test started failing. The test was creating an entity
with a validity: two &lt;code>Date&lt;/code> properties called &lt;code>validFrom&lt;/code> and &lt;code>validTo&lt;/code>, where
the first one was &amp;ldquo;now&amp;rdquo;, and the second one &amp;ldquo;infinity&amp;rdquo; (some big sentinel value
for the date). At some point we were querying for this entity, and the result
set was coming empty. Eventually I narrowed down the problem to a change in the
HQL query. I had replaced a &lt;code>Date&lt;/code> parameter by &lt;code>current_date()&lt;/code>, i.e. the
query used to be something like:&lt;/p>
&lt;pre>&lt;code>session.createQuery(
&amp;quot;select ... from ... &amp;quot;
+ &amp;quot;where :date between validFrom and validTo&amp;quot;)
.setParameter(&amp;quot;date&amp;quot;, new Date())
.list();
&lt;/code>&lt;/pre>&lt;p>and I replaced the where condition by &lt;code>current_date() between validFrom and validTo&lt;/code>.&lt;/p>
&lt;p>After some time, I found out that the time reported by the dockerized SQL
Server DB (using testcontainers) was an hour in the past. This was because by
default the docker container was using UTC as timezone, but I was running the
test in Vienna, which had UTC+1 at the time. I fixed this, so that the timezone
of the container matched the one used by the JVM (using the &lt;code>TZ&lt;/code> environment
variable).&lt;/p>
&lt;p>I thought I was done, but then the test started randomly failing. When
debugging the test though, it always passed (a so-called &amp;ldquo;Heisenbug&amp;rdquo;).&lt;/p>
&lt;p>Eventually, I noticed that the time reported by SQL Server was some milliseconds
behind the time reported by Java. Hibernate translates &lt;code>current_date()&lt;/code> to SQL
Server&amp;rsquo;s &lt;code>GetDate()&lt;/code>, which includes the time apart from the date. Thus, when
the test executed fast enough, sometimes the date-time returned by using
&lt;code>current_date()&lt;/code> was slightly in the past compared to the time as seen in Java,
making the query fail (because the &lt;code>validFrom&lt;/code> of the created entity was some
milliseconds &lt;em>after&lt;/em> the &lt;code>current_date()&lt;/code> time when executing the query). By then
I had spent enough figuring out the issue, that I couldn&amp;rsquo;t spend more figuring
out why the millisecond mismatch. I simply changed the query to use a parameter,
in that way the time was sure to be right.&lt;/p>
&lt;h2 id="modifying-in-memory-state">Modifying in-memory state&lt;/h2>
&lt;p>Sometimes a test would change a setting in a Spring singleton (say, changing a
flag to enable a feature), and wasn&amp;rsquo;t resetting it to its default. Then another
test class using the same application context would run, and implicitly rely on
the default value being used, failing.&lt;/p>
&lt;p>A variation of this was a test modifying a &lt;code>ThreadLocal&lt;/code> variable and not
resetting it, making a later test fail because it was implicitly relying on such
variable being null when it wasn&amp;rsquo;t.&lt;/p>
&lt;h2 id="using-a-static-reference-of-the-applicationcontext">Using a static reference of the ApplicationContext&lt;/h2>
&lt;p>We had a static reference to the &lt;code>ApplicationContext&lt;/code>, which was meant to be
used in classes that couldn&amp;rsquo;t be Spring beans, that is classes where we couldn&amp;rsquo;t
rely on Spring wiring the needed dependencies &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> (think for instance a Log4J2
plugin such as a custom appender). Unfortunately, throughout the years this was
misused, used in places where it shouldn&amp;rsquo;t have been. Then weird things would
happen with tests. A typical example would be 3 tests running as follows:&lt;/p>
&lt;ol>
&lt;li>Test1, using ApplicationContext A.&lt;/li>
&lt;li>Test2, using ApplicationContext B.&lt;/li>
&lt;li>Test3, using ApplicationContext A.&lt;/li>
&lt;/ol>
&lt;p>When Test1 initialized the application context, it would set the static
reference; then Test2 would do the same. Test3 wouldn&amp;rsquo;t, though, because it
didn&amp;rsquo;t initialize the application context, it reused the one that had already
been initialized before (because Spring caches it). Then Test3 would try to use
a bean from a different application context, leading to errors.&lt;/p>
&lt;p>Even when later this was changed so that each test would reset the static
reference, it was not enough, as some classes were getting a dependency from
the application context and caching it, or storing it in a &lt;code>static final&lt;/code> field,
which would still lead to a test using a bean from the wrong application
context.&lt;/p>
&lt;p>All this is of course avoided by following standard dependency injection
recommendations.&lt;/p>
&lt;h2 id="metadataextractorintegrator">MetadataExtractorIntegrator&lt;/h2>
&lt;p>In one of his articles, Vlad Mihalcea shows &lt;a href="https://vladmihalcea.com/how-to-get-access-to-database-table-metadata-with-hibernate-5/">how to get access to database metadata&lt;/a>
in Hibernate 5. The idea is registering a Hibernate &lt;code>Integrator&lt;/code> and reading the
&lt;code>SessionFactory&lt;/code>'s metadata. In that article the class is a singleton, keeping
the sole instance in a &lt;code>static final&lt;/code> field.&lt;/p>
&lt;p>As described, that works fine in production, but can cause issues during
testing. Different application contexts can have different Hibernate entities
(depending on which entities are registered while building the
&lt;code>SessionFactory&lt;/code>). What I saw happening was again a problem with test running
order and Spring&amp;rsquo;s application context caching. Again, given:&lt;/p>
&lt;ol>
&lt;li>Test1, using ApplicationContext A.&lt;/li>
&lt;li>Test2, using ApplicationContext B.&lt;/li>
&lt;li>Test3, using ApplicationContext A.&lt;/li>
&lt;/ol>
&lt;p>If ApplicationContext B had a smaller set of entities, then Test3 could fail because:&lt;/p>
&lt;ol>
&lt;li>Test1 runs, intializes ApplicationContext A, and the
MetadataExtractorIntegrator extracts the metadata and keeps it in its
&lt;code>INSTANCE&lt;/code> field.&lt;/li>
&lt;li>Test2 runs, intializes ApplicationContext B, and the
MetadataExtractorIntegrator extracts the metadata and overwrites the one kept
on its &lt;code>INSTANCE&lt;/code> field.&lt;/li>
&lt;li>Test3 runs, using the cached ApplicationContext A, with the metadata from
ApplicationContext B. At some point the test requests metadata for an entity
for which we have no data, since the &lt;code>SessionFactory&lt;/code> in ApplicationContext B
isn&amp;rsquo;t aware of it.&lt;/li>
&lt;/ol>
&lt;p>The fix for this was having a singleton Spring bean which stored the metadata
read by the &lt;code>MetadataExtractorIntegrator&lt;/code>, and having the rest of the code use
that bean instead of the &lt;code>MetadataExtractorIntegrator&lt;/code> &lt;code>INSTANCE&lt;/code>. In that way,
each application context had access to the right metadata.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Essentially a mixture of Ambient Context and Service Locator
anti-patterns, as defined in &amp;ldquo;Dependency Injection: Principles, Practices and Patterns&amp;rdquo;,
by Steven van Deursen and Mark Seemann. &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Speeding Up Test Suite In Java</title><link>https://contivero.github.io/post/speeding-up-tests/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0200</pubDate><guid>https://contivero.github.io/post/speeding-up-tests/</guid><description>&lt;p>I once had the chance to speed up a test suite spanning multiple maven projects
which took over 4 hours to run. The suite had around 8100 tests, many of which
were integration tests using a Spring &lt;code>ApplicationContext&lt;/code>. I managed to get this
down to around 1h 20~30 mins, until other priorities prevented further
reductions.&lt;/p>
&lt;p>What follows is how this was achieved, and what things to watch out for.&lt;/p>
&lt;h2 id="using-a-single-jvm-for-the-tests-in-a-project">Using a single JVM for the tests in a project&lt;/h2>
&lt;p>The very first point is reusing forks in your maven-surefire-plugin and
maven-failsafe-plugin configurations. This is the default, but many of the
projects had &lt;code>&amp;lt;reuseForks&amp;gt;false&amp;lt;/reuseForks&amp;gt;&lt;/code>. Using &lt;code>false&lt;/code> means that for each
test class a new JVM is used. This makes it easier to keep tests isolated, since
no JVM-global state is preserved (e.g. static variables). The downside is that
this is costlier than using a single JVM for all tests, and Spring&amp;rsquo;s
&lt;code>ApplicationContext&lt;/code> caching cannot work. This leads us to the next point.&lt;/p>
&lt;h2 id="spring-applicationcontext-caching">Spring ApplicationContext caching&lt;/h2>
&lt;p>By default Spring keeps each application context it needs to create cached, and
reuses them whenever possible. For two tests to use the same application context
they not only need to point to the same configuration (using the same
&lt;code>locations&lt;/code> or &lt;code>classes&lt;/code> in &lt;code>@ContextConfiguration&lt;/code>), but a bunch of other
things. For instance, if a test specifies a different &lt;code>initializer&lt;/code>, then that
implies using a different application context (for further details refer to
&lt;code>MergedContextConfiguration&lt;/code>, which is what Spring uses as key for the map of
application contexts it uses as cache).&lt;/p>
&lt;p>Thus, one should try to use the same application context for all tests in a
project that run under the same JVM. Sometimes a different application context
makes sense, but the less the better, performance-wise.&lt;/p>
&lt;h2 id="watch-out-for-jvm-global-state">Watch out for JVM-global state&lt;/h2>
&lt;p>Once the tests run under the same JVM, global state matters more. As always, we
need to minimize its usage, and keep it in mind to avoid flaky tests. An obvious
example is System properties. Another example is EhCache, which supports using
it as a singleton (e.g. with Hibernate&amp;rsquo;s &lt;code>SingletonEhCacheRegionFactory&lt;/code>, or
calling &lt;code>CacheManager.create()&lt;/code>).&lt;/p>
&lt;p>Any JVM singleton carries issues, as changes to the state by one test can affect
subsequent ones if we don&amp;rsquo;t properly clean up after it. By JVM singleton I mean
a class using a standard implementation of the Singleton pattern, such as using
an enum (as recommended by Bloch in Effective Java), or a static field.
Singleton Spring beans can still be a problem (if they have state), but are a
bit less susceptible because different &lt;code>ApplicationContexts&lt;/code> can have different
instances, so at least tests running with different &lt;code>ApplicationContext&lt;/code> won&amp;rsquo;t
affect each other through that bean.&lt;/p>
&lt;p>Also, relying on such state complicates running tests in parallel, as then
if test A passes or not can depend on whether some other test B that also
modifies the same state runs at the same time or not.&lt;/p>
&lt;h2 id="watch-out-for-thread-bound-values">Watch out for thread-bound values&lt;/h2>
&lt;p>When relying on a &lt;code>ThredLocal&lt;/code> value, you need to make sure your tests clear it
after being done, and tests that depend on it set the appropriate value at the
beginning, even if this value is the default one (say, null). Both are solutions
to the same issue: if each test cleans up after using the thread-bound resource,
then later tests don&amp;rsquo;t need to set the default again, and if other tests set the
needed value at the start (even if it&amp;rsquo;s the default), then previous tests don&amp;rsquo;t
need to clean up. Having both is mostly for better resilience, and setting the
right value at the beginning (even if it&amp;rsquo;s the default) is being explicit about
a tests prerequisites, so it also works as documentation.&lt;/p>
&lt;h2 id="reusing-database-between-tests">Reusing database between tests&lt;/h2>
&lt;p>Starting up a database is costly, even when using an in-memory one such as
HSQLDB. Using a docker instance of the same DBMS as in production with
testcontainers is better—and costlier.&lt;/p>
&lt;p>It thus makes sense from a performance perspective to try to use a single
database for all tests in a suite. This of course introduces another point
through which different tests can affect each other. For example, if a test
creates two instances of an entity in a database, and then asserts that there
are actually two such instances in there, it can fail if some other test created
another instance before. This means we cannot:&lt;/p>
&lt;ol>
&lt;li>Run assertions about the whole state of a database table (aggregations such
as count, max or min can be problematic).&lt;/li>
&lt;li>Run statements that modify the whole state of a table, such as deleting all
rows.&lt;/li>
&lt;/ol>
&lt;p>As a practical example of (2), when initializing the application context, we had
some logic to create some default entries in the database (if missing) which we
could later expect to always be there (e.g. default currency, default language,
etc.) A test that deleted all data for one of these tables ended up corrupting
subsequent tests that expected such defaults to be in the database, but didn&amp;rsquo;t
find them (because they reused the &lt;code>ApplicationContext&lt;/code>, so the defaults weren&amp;rsquo;t
re-created).&lt;/p>
&lt;p>How should different tests use the same database then? One option is expecting
each test to clean up after itself. This can work, but is of course error-prone,
as it&amp;rsquo;s easy for a developer to forget it (or not do it thoroughly enough), and
end up causing hard-to-track flaky tests. The other side of the same coin is
expecting each test to make sure the database is in the right state before
running (i.e. by clearing the needed tables). But this suffers from the same
downsides.&lt;/p>
&lt;p>Another frequently used approach is recreating the whole DB when a test starts,
and dropping the whole DB at the end of it. This can be easier to automatize,
and then avoids the previously mentioned issue. All three approaches though
complicate parallelizing tests, since having two tests that need the same
database table run in parallel can easily lead to race conditions.&lt;/p>
&lt;p>A better option is randomizing test data. By creating fresh, unique entries
in the database that are sufficiently random, then&lt;/p>
&lt;ol>
&lt;li>Tests are less likely to affect each other. Of course the initial
restrictions still apply: running aggregation functions on tables or performing
statements that alter state that other tests need (such as deleting all entries
in a table) are still problematic. Tests need to run assertions specific to the
data they create, but this is seldom a problem.&lt;/li>
&lt;li>There is no need to clean up between tests. Tests can freely pollute the
database, and some argue this is even more realistic, as it&amp;rsquo;s closer to how it
would be in production (it&amp;rsquo;s artificial to always have a clean empty database
for each use-case).&lt;/li>
&lt;li>Lastly, they are amenable to parallelization, because no clean up is
performed, and because with sufficiently random data no unique constraint
should be violated.&lt;/li>
&lt;/ol>
&lt;p>To support this, the creation of frequently used entities can be encapsulated in
some helper classes. JUnit 5 extensions can also reduce a lot of the boilerplate
(so that registering an extension will create a bunch of randomized entities and
their needed relations), and there is even some libraries that can simplify this
further (e.g. instancio).&lt;/p></description></item><item><title>Class as Alternative to Parameter Threading</title><link>https://contivero.github.io/post/class-as-alternative-to-parameter-threading/</link><pubDate>Wed, 31 Jul 2024 00:00:00 +0200</pubDate><guid>https://contivero.github.io/post/class-as-alternative-to-parameter-threading/</guid><description>&lt;p>Instead of injecting values through method arguments and having to keep passing
them wherever they are needed, consider creating an immutable object which
encapsulates the logic and the needed values which are set on creation.&lt;/p>
&lt;p>One benefit of this is improved readability. For instance, suppose we
have two sets, one of valid codes for something (&lt;code>validCodes&lt;/code>) and another of
allowed dates (&lt;code>allowedDates&lt;/code>). Compare:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">if&lt;/span> &lt;span style="color:#666">(&lt;/span>isValidCode&lt;span style="color:#666">(&lt;/span>validCodes&lt;span style="color:#666">,&lt;/span> code&lt;span style="color:#666">)&lt;/span>
&lt;span style="color:#666">&amp;amp;&lt;/span>&lt;span style="color:#666">&amp;amp;&lt;/span> isInAllowedDates&lt;span style="color:#666">(&lt;/span>allowedDates&lt;span style="color:#666">,&lt;/span> date&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#080;font-style:italic">/* do something */&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>vs.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">if&lt;/span> &lt;span style="color:#666">(&lt;/span>isValidCode&lt;span style="color:#666">(&lt;/span>code&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">&amp;amp;&lt;/span>&lt;span style="color:#666">&amp;amp;&lt;/span> isInAllowedDate&lt;span style="color:#666">(&lt;/span>date&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#080;font-style:italic">/* do something */&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This can be useful when a method starts by getting a bunch of values which don&amp;rsquo;t
change (say, getting a bunch of user IDs from the database for some kind of
processing). Storing these on the enclosing class means setting them in a
mutable (non-final) field, because these will be initialized in a method and not
in the constructor. As a trimmed-down example, consider the following code which
sends a coupon code:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">CouponCodeEmailSendingJob&lt;/span> &lt;span style="color:#a2f;font-weight:bold">implements&lt;/span> Runnable &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> UserService userService&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> MailService mailService&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> Set&lt;span style="color:#666">&amp;lt;&lt;/span>User&lt;span style="color:#666">&amp;gt;&lt;/span> users&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> String emailTemplate&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#00a000">CouponCodeEmailSendingJob&lt;/span>&lt;span style="color:#666">(&lt;/span>UserService userService&lt;span style="color:#666">,&lt;/span> MailService mailService&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">this&lt;/span>&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">userService&lt;/span> &lt;span style="color:#666">=&lt;/span> userService&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">this&lt;/span>&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">mailService&lt;/span> &lt;span style="color:#666">=&lt;/span> mailService&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">run&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
users &lt;span style="color:#666">=&lt;/span> userService&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">getUsers&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
emailTemplate &lt;span style="color:#666">=&lt;/span> mailService&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">getCurrentEmailTemplate&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* more code */&lt;/span>
sendEmails&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* mode code */&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">sendEmails&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">for&lt;/span> &lt;span style="color:#666">(&lt;/span>User user &lt;span style="color:#666">:&lt;/span> users&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
mailService&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">sendCouponCodeEmail&lt;/span>&lt;span style="color:#666">(&lt;/span>user&lt;span style="color:#666">,&lt;/span> emailTemplate&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>For starters, the temporal dependency between assigning fields and using them
isn&amp;rsquo;t explicit. In such small example it might be obvious, but the less I need
to think and keep track off, the better. If we were dealing with a more complex
case as it usually is, we might end up re-ordering statements so that we attempt
to send emails before the users and emailTemplate fields are set. Presumably
such glarious mistake would pop-up during testing, but it still would make us
lose time.&lt;/p>
&lt;p>We can make the dependency explicit by taking both as parameters for
&lt;code>sendEmails&lt;/code>, and making the variables local to the method and not fields.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java"> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> Set&lt;span style="color:#666">&amp;lt;&lt;/span>User&lt;span style="color:#666">&amp;gt;&lt;/span> users &lt;span style="color:#666">=&lt;/span> userService&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">getUsers&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">final&lt;/span> String emailTemplate &lt;span style="color:#666">=&lt;/span> mailService&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">getCurrentEmailTemplate&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* more code */&lt;/span>
sendEmails&lt;span style="color:#666">(&lt;/span>users&lt;span style="color:#666">,&lt;/span> emailTemplate&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* mode code */&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, if we reorder the code in an incorrect manner, it won&amp;rsquo;t compile. This is an
improvement. But sometimes it&amp;rsquo;s not two parameters, but five, or more. And it&amp;rsquo;s
not a single private method, but several, and we need to keep threading the
parameters down to wherever they are needed. This can get unwidly fast.&lt;/p>
&lt;p>Thread-safety is another issue with the original code that we&amp;rsquo;ve improved upon.
In the first iteration of the code, by having &lt;code>users&lt;/code> and &lt;code>emailTemplate&lt;/code> be
non-final instance variables, if the &lt;code>Runnable&lt;/code> would be called in parallel,
then we might change the &lt;code>users&lt;/code> and &lt;code>emailTemplate&lt;/code> fields before the first
thread attempts to send the emails (e.g. if the &amp;ldquo;current&amp;rdquo; email template is
another by the time the second thread runs). Because of that, making them
variables local to the method&amp;rsquo;s scope is safer.&lt;/p>
&lt;p>But still the annoyance with threading parameters remains. In such cases,
defining them as fields in a new class allows us to avoid this, and potentially
move towards immutability, which would aid with making the code easier to
understand, and closer to being thread-safe.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">CouponCodeEmailSendingJob&lt;/span> &lt;span style="color:#a2f;font-weight:bold">implements&lt;/span> Runnable &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> UserService userService&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> MailService mailService&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#00a000">CouponCodeEmailSendingJob&lt;/span>&lt;span style="color:#666">(&lt;/span>UserService userService&lt;span style="color:#666">,&lt;/span> MailService mailService&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">this&lt;/span>&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">userService&lt;/span> &lt;span style="color:#666">=&lt;/span> userService&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">this&lt;/span>&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">mailService&lt;/span> &lt;span style="color:#666">=&lt;/span> mailService&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">run&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">new&lt;/span> InnerJob&lt;span style="color:#666">(&lt;/span>userService&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">getPremiumUsers&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">,&lt;/span> mailService&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">getCurrentEmailTemplate&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">)&lt;/span>
&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">run&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">InnerJob&lt;/span> &lt;span style="color:#a2f;font-weight:bold">implements&lt;/span> Runnable &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> Set&lt;span style="color:#666">&amp;lt;&lt;/span>User&lt;span style="color:#666">&amp;gt;&lt;/span> users&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> String emailTemplate&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#00a000">InnerJob&lt;/span>&lt;span style="color:#666">(&lt;/span>Set&lt;span style="color:#666">&amp;lt;&lt;/span>User&lt;span style="color:#666">&amp;gt;&lt;/span> users&lt;span style="color:#666">,&lt;/span> emailTemplate&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">this&lt;/span>&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">users&lt;/span> &lt;span style="color:#666">=&lt;/span> users&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">this&lt;/span>&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">emailTemplate&lt;/span> &lt;span style="color:#666">=&lt;/span> emailTemplate&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">run&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#080;font-style:italic">/* more code ... */&lt;/span>
sendEmails&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* more code ... */&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">sendEmail&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#666">/&lt;/span> &lt;span style="color:#666">*&lt;/span> &lt;span style="color:#666">.&lt;/span>&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#666">.&lt;/span> &lt;span style="color:#666">*&lt;/span> &lt;span style="color:#666">/&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#080;font-style:italic">/* ... */&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now if we ever need to run this in parallel, each run has its own instance of
&lt;code>InnerJob&lt;/code>, so we don&amp;rsquo;t need to worry about race conditions. &lt;code>InnerJob&lt;/code> could
even have mutable state (say, keep track of statistics for logging how many
emails were sent, how many failed, etc.), and it wouldn&amp;rsquo;t be an issue because
&lt;code>InnerJob&lt;/code> is never shared between threads.&lt;/p>
&lt;p>Of course we can still create implicit temporal couplings because the set of
users is shallowly immutable. A method could filter out some users from the set,
or add new ones, and then depending on when &lt;code>sendEmails()&lt;/code> is called, we would
send it to a set of users or another. Ideally though, we should treat the Set as
immutable and not modify it once it&amp;rsquo;s set. Any such filtering or additions
would be best performed before initializing &lt;code>InnerJob&lt;/code> with the &lt;code>Set&lt;/code> to use. If
so desired, we could enforce this by using some immutable set implementation
(e.g. by wrapping the &lt;code>Set&lt;/code> in &lt;code>Collections.unmodifiableSet&lt;/code>), but for small,
contained pieces of code, this is usually not needed.&lt;/p></description></item><item><title>Self Proxy Injection Anti-Pattern</title><link>https://contivero.github.io/post/self-proxy-injection-anti-pattern/</link><pubDate>Wed, 26 Apr 2023 07:45:13 +0200</pubDate><guid>https://contivero.github.io/post/self-proxy-injection-anti-pattern/</guid><description>&lt;p>Because of how Spring&amp;rsquo;s implementation of AOP works (i.e. proxies), internal
calls to a method in a proxied bean cannot be intercepted. This is a limitation
of any AOP implementation using dynamic proxies. A way I&amp;rsquo;ve seen used to bypass
this limitation is having an object with a dependency on itself, so that, for
instance, internal calls to methods can also be cached when using a cache
proxy&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. Something like the following:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">ServiceImpl&lt;/span> &lt;span style="color:#a2f;font-weight:bold">implements&lt;/span> Service&lt;span style="color:#666">,&lt;/span> ApplicationContextAware &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> Service cachedService&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> ApplicationContext applicationContext&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> Service &lt;span style="color:#00a000">getCachedService&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">if&lt;/span> &lt;span style="color:#666">(&lt;/span>cachedService &lt;span style="color:#666">=&lt;/span>&lt;span style="color:#666">=&lt;/span> &lt;span style="color:#a2f;font-weight:bold">null&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
cachedService &lt;span style="color:#666">=&lt;/span> applicationContext&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">getBean&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#b44">&amp;#34;Service&amp;#34;&lt;/span>&lt;span style="color:#666">,&lt;/span> Service&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">class&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">return&lt;/span> cachedService&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> Collection&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">?&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span> aCachedMethod&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#080;font-style:italic">/* some expensiven computation of a collection */&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> String &lt;span style="color:#00a000">getSomething&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
Collection&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">?&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span> collection &lt;span style="color:#666">=&lt;/span> getCachedService&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">aCachedMethod&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">return&lt;/span> &lt;span style="color:#080;font-style:italic">/* some computation with the collection */&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Though this might seem ingenious to some, this is essentially a cyclic
dependency. Problems with the previous snippet of code are:&lt;/p>
&lt;ol>
&lt;li>It uses the &lt;a href="https://blog.ploeh.dk/2010/02/03/ServiceLocatorisanAnti-Pattern/">Service Locator anti-pattern&lt;/a>,
manually getting the proxied &lt;code>Service&lt;/code> from the DI container, instead of
getting it injected as a dependency.&lt;/li>
&lt;li>Whoever maintains the code needs to know and remember to use &lt;code>getCachedService()&lt;/code>
instead of using &lt;code>cachedService&lt;/code> directly, which would bypass the cache and could
even result in a &lt;code>NullPointerException&lt;/code>.&lt;/li>
&lt;/ol>
&lt;p>We could tackle (1), and partially (2) by using property injection:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">ServiceImpl&lt;/span> &lt;span style="color:#a2f;font-weight:bold">implements&lt;/span> Service &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> Service cachedService&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">setCachedService&lt;/span>&lt;span style="color:#666">(&lt;/span>Service cachedService&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">this&lt;/span>&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">cachedService&lt;/span> &lt;span style="color:#666">=&lt;/span> cachedService&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> String &lt;span style="color:#00a000">getSomething&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
Collection&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">?&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span> collection &lt;span style="color:#666">=&lt;/span> getCachedService&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">aCachedMethod&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">return&lt;/span> &lt;span style="color:#080;font-style:italic">/* some computation with the collection */&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>However, the problem that you need to know about &lt;code>cachedService&lt;/code> and remember to
use it remains. Also, we cannot make the field final and get it injected with
constructor injection.&lt;/p>
&lt;p>The solution is the same as for any cyclic dependency: split the class. Those
methods that we want to call and be sure are being cached should be in another
class. Then all problems go away:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">ServiceImpl&lt;/span> &lt;span style="color:#a2f;font-weight:bold">implements&lt;/span> Service &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> AnotherService anotherService&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#00a000">ServiceImpl&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#a2f;font-weight:bold">final&lt;/span> AnotherService anotherService&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">this&lt;/span>&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">anotherService&lt;/span> &lt;span style="color:#666">=&lt;/span> anotherService&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> String &lt;span style="color:#00a000">getSomething&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
Collection&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">?&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span> collection &lt;span style="color:#666">=&lt;/span> anotherService&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">aCachedMethod&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">return&lt;/span> &lt;span style="color:#080;font-style:italic">/* some computation with the collection */&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now the only way to call the method needed is through &lt;code>anotherService&lt;/code>, so
it&amp;rsquo;s not possible to miss using it and bypass the caching.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Also suggested for instance &lt;a href="https://stackoverflow.com/questions/13564627/spring-aop-not-working-for-method-call-inside-another-method">here&lt;/a>. &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Towards a Typesafe Map</title><link>https://contivero.github.io/post/towards-a-type-safe-map/</link><pubDate>Sun, 02 Oct 2022 23:22:00 +0200</pubDate><guid>https://contivero.github.io/post/towards-a-type-safe-map/</guid><description>&lt;p>Say we want a heterogeneous &lt;code>Map&lt;/code> in java, i.e. a map where the values have
different types. Let&amp;rsquo;s further assume we know the possible keys at compile time.&lt;/p>
&lt;h2 id="barebones-solution">Barebones solution&lt;/h2>
&lt;p>The simplest approach would be having a &lt;code>Map&amp;lt;String, Object&amp;gt;&lt;/code> (or whatever other
key type). We would need to remember which key corresponds to which type, and do
the proper casts:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">String value1 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#666">(&lt;/span>String&lt;span style="color:#666">)&lt;/span> map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">get&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#b44">&amp;#34;someStringKey&amp;#34;&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#0b0;font-weight:bold">boolean&lt;/span> value2 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#666">(&lt;/span>&lt;span style="color:#0b0;font-weight:bold">boolean&lt;/span>&lt;span style="color:#666">)&lt;/span> map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">get&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#b44">&amp;#34;someBooleanKey&amp;#34;&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* etc. */&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is of course error-prone, delegating to the programmer what should be the
task of the compiler.&lt;/p>
&lt;h2 id="introducing-generics-classes-as-keys">Introducing generics: classes as keys&lt;/h2>
&lt;p>A better option is relying on generics for type safety. One such option is
found for instance in Joshua Bloch&amp;rsquo;s Effective Java, Item 33 (Consider typesafe
heterogeneous containers). This looks as follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">HeterogeneousMap&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> Map&lt;span style="color:#666">&amp;lt;&lt;/span>Class&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">?&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">,&lt;/span> Object&lt;span style="color:#666">&amp;gt;&lt;/span> map &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#a2f;font-weight:bold">new&lt;/span> HashMap&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">put&lt;/span>&lt;span style="color:#666">(&lt;/span>Class&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> key&lt;span style="color:#666">,&lt;/span> T value&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">put&lt;/span>&lt;span style="color:#666">(&lt;/span>key&lt;span style="color:#666">,&lt;/span> value&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> T &lt;span style="color:#00a000">get&lt;/span>&lt;span style="color:#666">(&lt;/span>Class&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> key&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">return&lt;/span> key&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">cast&lt;/span>&lt;span style="color:#666">(&lt;/span>map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">get&lt;/span>&lt;span style="color:#666">(&lt;/span>key&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>With this, we can operate with the map as follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">HeterogeneousMap map &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#a2f;font-weight:bold">new&lt;/span> HeterogeneousMap&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">put&lt;/span>&lt;span style="color:#666">(&lt;/span>Integer&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">class&lt;/span>&lt;span style="color:#666">,&lt;/span> 5&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">put&lt;/span>&lt;span style="color:#666">(&lt;/span>String&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">class&lt;/span>&lt;span style="color:#666">,&lt;/span> &lt;span style="color:#b44">&amp;#34;High&amp;#34;&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
System&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">out&lt;/span>&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">println&lt;/span>&lt;span style="color:#666">(&lt;/span>map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">get&lt;/span>&lt;span style="color:#666">(&lt;/span>String&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">class&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">+&lt;/span> map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">get&lt;/span>&lt;span style="color:#666">(&lt;/span>Integer&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">class&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#080;font-style:italic">// prints: High 5
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This has the limitation that we can have at most one value of each class.&lt;/p>
&lt;h2 id="adding-a-polymorphic-key-type">Adding a polymorphic key type&lt;/h2>
&lt;p>To surmount the previous limitation, we can define a type to act as key which
has one type argument. We can then declare the different instances as public
constants, as a kind of handrolled enum:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">Key&lt;/span>&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">static&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> Key&lt;span style="color:#666">&amp;lt;&lt;/span>Integer&lt;span style="color:#666">&amp;gt;&lt;/span> KEY1 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#a2f;font-weight:bold">new&lt;/span> Key&lt;span style="color:#666">(&lt;/span>Integer&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">class&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">static&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> Key&lt;span style="color:#666">&amp;lt;&lt;/span>Integer&lt;span style="color:#666">&amp;gt;&lt;/span> KEY2 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#a2f;font-weight:bold">new&lt;/span> Key&lt;span style="color:#666">(&lt;/span>Integer&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">class&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">static&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> Key&lt;span style="color:#666">&amp;lt;&lt;/span>String&lt;span style="color:#666">&amp;gt;&lt;/span> KEY3 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#a2f;font-weight:bold">new&lt;/span> Key&lt;span style="color:#666">(&lt;/span>String&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">class&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* etc. */&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#00a000">Key&lt;/span>&lt;span style="color:#666">(&lt;/span>Class&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> v&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span> &lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that the type as such is a &lt;em>phantom type&lt;/em>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>, though it needen&amp;rsquo;t be, as we
could store the class or other values if so desired. With such defintion, our
map implementation would be:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">HeterogeneousMap&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> Map&lt;span style="color:#666">&amp;lt;&lt;/span>Key&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">?&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">,&lt;/span> Object&lt;span style="color:#666">&amp;gt;&lt;/span> map &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#a2f;font-weight:bold">new&lt;/span> HashMap&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">put&lt;/span>&lt;span style="color:#666">(&lt;/span>Key&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> key&lt;span style="color:#666">,&lt;/span> T value&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">put&lt;/span>&lt;span style="color:#666">(&lt;/span>key&lt;span style="color:#666">,&lt;/span> value&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> T &lt;span style="color:#00a000">get&lt;/span>&lt;span style="color:#666">(&lt;/span>Key&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> key&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">return&lt;/span> key&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">cast&lt;/span>&lt;span style="color:#666">(&lt;/span>map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">get&lt;/span>&lt;span style="color:#666">(&lt;/span>key&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>With such setup, we now can have more than one value with the same type, though
we rely on knowing the different keys at compile-time.&lt;/p>
&lt;h2 id="abstracting-further-simulating-higher-kinded-types">Abstracting further: simulating higher-kinded types&lt;/h2>
&lt;p>Now suppose we want to use instances of this map in different contexts with
different keys. For instance, we could have keys that represent user options:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">UserOption&lt;/span>&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">static&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> UserOption&lt;span style="color:#666">&amp;lt;&lt;/span>String&lt;span style="color:#666">&amp;gt;&lt;/span> TIMEZONE &lt;span style="color:#666">=&lt;/span> create&lt;span style="color:#666">(&lt;/span>String&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">class&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">static&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> UserOption&lt;span style="color:#666">&amp;lt;&lt;/span>String&lt;span style="color:#666">&amp;gt;&lt;/span> LANGUAGE &lt;span style="color:#666">=&lt;/span> create&lt;span style="color:#666">(&lt;/span>String&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">class&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">static&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> UserOption&lt;span style="color:#666">&amp;lt;&lt;/span>WebsiteTheme&lt;span style="color:#666">&amp;gt;&lt;/span> THEME &lt;span style="color:#666">=&lt;/span> create&lt;span style="color:#666">(&lt;/span>WebsiteTheme&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">class&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* etc. */&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#00a000">UserOption&lt;/span>&lt;span style="color:#666">(&lt;/span>Class&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> v&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span> &lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">static&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span>V&lt;span style="color:#666">&amp;gt;&lt;/span> UserOption&lt;span style="color:#666">&amp;lt;&lt;/span>V&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#00a000">create&lt;/span>&lt;span style="color:#666">(&lt;/span>Class&lt;span style="color:#666">&amp;lt;&lt;/span>V&lt;span style="color:#666">&amp;gt;&lt;/span> c&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">return&lt;/span> &lt;span style="color:#a2f;font-weight:bold">new&lt;/span> UserOption&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">(&lt;/span>c&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>and some other keys that represent optional parameters to some service method:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">OptionalParameter&lt;/span>&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">static&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> OptionalParameter&lt;span style="color:#666">&amp;lt;&lt;/span>String&lt;span style="color:#666">&amp;gt;&lt;/span> SOME_PARAM &lt;span style="color:#666">=&lt;/span> create&lt;span style="color:#666">(&lt;/span>String&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">class&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">static&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> OptionalParameter&lt;span style="color:#666">&amp;lt;&lt;/span>Long&lt;span style="color:#666">&amp;gt;&lt;/span> ANOTHER_PARAM &lt;span style="color:#666">=&lt;/span> create&lt;span style="color:#666">(&lt;/span>Long&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">class&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* etc. */&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#00a000">OptionalParameter&lt;/span>&lt;span style="color:#666">(&lt;/span>Class&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> v&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span> &lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">static&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span>V&lt;span style="color:#666">&amp;gt;&lt;/span> OptionalParameter&lt;span style="color:#666">&amp;lt;&lt;/span>V&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#00a000">create&lt;/span>&lt;span style="color:#666">(&lt;/span>Class&lt;span style="color:#666">&amp;lt;&lt;/span>V&lt;span style="color:#666">&amp;gt;&lt;/span> c&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">return&lt;/span> &lt;span style="color:#a2f;font-weight:bold">new&lt;/span> OptionalParameter&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">(&lt;/span>c&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The problem with this is that we need &lt;code>HeterogeneousMap&lt;/code> to be generic on the type of key, something like the following:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">HeterogeneousMap&lt;/span>&lt;span style="color:#666">&amp;lt;&lt;/span>K&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> Map&lt;span style="color:#666">&amp;lt;&lt;/span>K&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">?&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">,&lt;/span> Object&lt;span style="color:#666">&amp;gt;&lt;/span> map &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#a2f;font-weight:bold">new&lt;/span> HashMap&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">put&lt;/span>&lt;span style="color:#666">(&lt;/span>K&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> key&lt;span style="color:#666">,&lt;/span> T value&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">put&lt;/span>&lt;span style="color:#666">(&lt;/span>key&lt;span style="color:#666">,&lt;/span> value&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> T &lt;span style="color:#00a000">get&lt;/span>&lt;span style="color:#666">(&lt;/span>K&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> key&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">return&lt;/span> key&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">cast&lt;/span>&lt;span style="color:#666">(&lt;/span>map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">get&lt;/span>&lt;span style="color:#666">(&lt;/span>key&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This would then allow us to define a &lt;code>HeterogeneousMap&amp;lt;OptionalParameter&amp;lt;?&amp;gt;&amp;gt;&lt;/code>,
&lt;code>HeterogeneousMap&amp;lt;UserOption&amp;lt;?&amp;gt;&amp;gt;&lt;/code>, etc. Unfortunately this doesn&amp;rsquo;t compile in
java. Java doesn&amp;rsquo;t have higher-kinded types &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>, which is precisely what we
need for this. We can simulate the feature up to a point as follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#080;font-style:italic">/* Marker interface for encoding a type F&amp;lt;T&amp;gt; of kind * -&amp;gt; *. */&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">interface&lt;/span> &lt;span style="color:#00f">H&lt;/span>&lt;span style="color:#666">&amp;lt;&lt;/span>F&lt;span style="color:#666">,&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#666">{&lt;/span>&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">OptionalParameter&lt;/span>&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#a2f;font-weight:bold">implements&lt;/span> H&lt;span style="color:#666">&amp;lt;&lt;/span>OptionalParameter&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">?&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">,&lt;/span> T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#080;font-style:italic">/* the rest is the same as before */&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">UserOption&lt;/span>&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#a2f;font-weight:bold">implements&lt;/span> H&lt;span style="color:#666">&amp;lt;&lt;/span>UserOption&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">?&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">,&lt;/span> T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#080;font-style:italic">/* the rest is the same as before */&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">HeterogeneousMap&lt;/span>&lt;span style="color:#666">&amp;lt;&lt;/span>S &lt;span style="color:#a2f;font-weight:bold">extends&lt;/span> H&lt;span style="color:#666">&amp;lt;&lt;/span>S&lt;span style="color:#666">,&lt;/span> &lt;span style="color:#666">?&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> Map&lt;span style="color:#666">&amp;lt;&lt;/span>Object&lt;span style="color:#666">,&lt;/span> Object&lt;span style="color:#666">&amp;gt;&lt;/span> map &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#a2f;font-weight:bold">new&lt;/span> HashMap&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span>K &lt;span style="color:#a2f;font-weight:bold">extends&lt;/span> H&lt;span style="color:#666">&amp;lt;&lt;/span>S&lt;span style="color:#666">,&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">,&lt;/span> T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">put&lt;/span>&lt;span style="color:#666">(&lt;/span>K key&lt;span style="color:#666">,&lt;/span> T value&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">put&lt;/span>&lt;span style="color:#666">(&lt;/span>key&lt;span style="color:#666">,&lt;/span> value&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f">@SuppressWarnings&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#b44">&amp;#34;unchecked&amp;#34;&lt;/span>&lt;span style="color:#666">)&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span>K &lt;span style="color:#a2f;font-weight:bold">extends&lt;/span> H&lt;span style="color:#666">&amp;lt;&lt;/span>S&lt;span style="color:#666">,&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">,&lt;/span> T&lt;span style="color:#666">&amp;gt;&lt;/span> T &lt;span style="color:#00a000">get&lt;/span>&lt;span style="color:#666">(&lt;/span>K key&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">return&lt;/span> &lt;span style="color:#666">(&lt;/span>T&lt;span style="color:#666">)&lt;/span> map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">get&lt;/span>&lt;span style="color:#666">(&lt;/span>key&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>With this we&amp;rsquo;ve almost managed to get what we wanted. We can operate with the map as follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">HeterogeneousMap&lt;span style="color:#666">&amp;lt;&lt;/span>UserOption&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">?&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span> map &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#a2f;font-weight:bold">new&lt;/span> HeterogeneousMap&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">put&lt;/span>&lt;span style="color:#666">(&lt;/span>UserOption&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">TIMEZONE&lt;/span>&lt;span style="color:#666">,&lt;/span> &lt;span style="color:#b44">&amp;#34;America/Argentina/Buenos_Aires&amp;#34;&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">put&lt;/span>&lt;span style="color:#666">(&lt;/span>UserOption&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">THEME&lt;/span>&lt;span style="color:#666">,&lt;/span> WebsiteTheme&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">DARK&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
String timezone &lt;span style="color:#666">=&lt;/span> map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">get&lt;/span>&lt;span style="color:#666">(&lt;/span>UserOption&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">TIMEZONE&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
WebsiteTheme theme &lt;span style="color:#666">=&lt;/span> map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">get&lt;/span>&lt;span style="color:#666">(&lt;/span>UserOption&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">THEME&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* etc. */&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>as can be seen, we can put stuff into the map using the &lt;code>UserOption&lt;/code> constants, and don&amp;rsquo;t need any casting when getting values out.
Additionally, none of the following compile:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#080;font-style:italic">/* Putting a value of the wrong type for the given key */&lt;/span>
map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">put&lt;/span>&lt;span style="color:#666">(&lt;/span>UserOption&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">TIMEZONE&lt;/span>&lt;span style="color:#666">,&lt;/span> 3&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* Getting a value of the wrong type from the map */&lt;/span>
String timezone &lt;span style="color:#666">=&lt;/span> map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">get&lt;/span>&lt;span style="color:#666">(&lt;/span>UserOption&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">THEME&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* Wrong key type. Though SOME_PARAM represents a string parameter, we declared
&lt;/span>&lt;span style="color:#080;font-style:italic"> * the map for UserOption, not for OptionalParameter */&lt;/span>
map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">put&lt;/span>&lt;span style="color:#666">(&lt;/span>OptionalParameter&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">SOME_PARAM&lt;/span>&lt;span style="color:#666">,&lt;/span> &lt;span style="color:#b44">&amp;#34;extraString&amp;#34;&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* As before, the map was declared for UserOption, so we cannot use
&lt;/span>&lt;span style="color:#080;font-style:italic"> * OptionalParameter as key */&lt;/span>
String extraParam &lt;span style="color:#666">=&lt;/span> map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">get&lt;/span>&lt;span style="color:#666">(&lt;/span>OptionalParameter&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">SOME_PARAM&lt;/span>&lt;span style="color:#666">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The limitation with this is that we have no way of enforcing that a type
implements &lt;code>H&lt;/code> the right way. As an example, we could have:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">OptionalParameter&lt;/span>&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#a2f;font-weight:bold">implements&lt;/span> H&lt;span style="color:#666">&amp;lt;&lt;/span>UserOption&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">?&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">,&lt;/span> T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#080;font-style:italic">/* the rest is the same as before */&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">HeterogeneousMap&lt;span style="color:#666">&amp;lt;&lt;/span>UserOption&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">?&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span> map &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#a2f;font-weight:bold">new&lt;/span> HeterogeneousMap&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">put&lt;/span>&lt;span style="color:#666">(&lt;/span>OptionalParameter&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">INTEGER_PARAM&lt;/span>&lt;span style="color:#666">,&lt;/span> 3&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">get&lt;/span>&lt;span style="color:#666">(&lt;/span>OptionalParameter&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">INTEGER_PARAM&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In other words, we&amp;rsquo;ve managed to use keys of type &lt;code>OptionalParameter&lt;/code> in a
map meant for &lt;code>UserOption&lt;/code> keys. It is possible to avoid this by using an
annotation processor to prohibit (having a compilation error) a type &lt;code>T&lt;/code>
implementing &lt;code>H&lt;/code> with an argument other than itself. This is what projects such
as &lt;a href="https://github.com/derive4j/hkt">derive4j/hkt&lt;/a> do, but I won&amp;rsquo;t go now
further in that direction.&lt;/p>
&lt;p>The technique is still useful as is, for instance when one controls the code and
knows to abide by the restriction that whenever a new type &lt;code>K&amp;lt;T&amp;gt;&lt;/code> of key wants
to be used, that type needs to implement &lt;code>H&amp;lt;K&amp;lt;?&amp;gt;,T&amp;gt;&lt;/code>.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>A phantom type is a type with a type parameter which isn&amp;rsquo;t used (in
methods nor fields). The definition might change slightly based on the language
where it&amp;rsquo;s used, but the gist is the same. Their use is known in languages such
as Haskell and Rust, though Java supports them too. &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Kind_(type_theory)">https://en.wikipedia.org/wiki/Kind_(type_theory)&lt;/a> &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Thoughts on static methods</title><link>https://contivero.github.io/post/thoughts-on-static-methods/</link><pubDate>Mon, 15 Aug 2022 08:00:00 +0200</pubDate><guid>https://contivero.github.io/post/thoughts-on-static-methods/</guid><description>&lt;p>I&amp;rsquo;ve had to argue more than once why I&amp;rsquo;m making some method static, so I decided
to write it down.&lt;/p>
&lt;p>Methods that use no instance variables should be made static. Making the
method static restricts its possibilities, making it easier to reason about.
It&amp;rsquo;s more restricted in the sense that it&amp;rsquo;s impossible for it to mutate any
instance variable of the class where it&amp;rsquo;s defined. If it&amp;rsquo;s static:&lt;/p>
&lt;ol>
&lt;li>You know it doesn&amp;rsquo;t reference any state of the class where it&amp;rsquo;s
defined; it can&amp;rsquo;t.&lt;/li>
&lt;li>It&amp;rsquo;s highly likely it has no side-effect on the object where it&amp;rsquo;s defined.
Sure, it could be mutating some static field, but that would most likely be
terrible design, so one can usually discard that. It&amp;rsquo;s also possible that it
mutates state of one of its arguments, so the method need not be side-effect
free. But all that and more is possible with instance methods too.&lt;/li>
&lt;/ol>
&lt;p>All this information is also instantly accessible through the IDE, because most
use italics by default for these methods (this tends to be configurable), so
when seeing the italics you know it&amp;rsquo;s some utility method with those
characteristics.&lt;/p>
&lt;p>It&amp;rsquo;s pointless to require instantiating an object to call a method that makes no
use of that object&amp;rsquo;s state (with the exception of methods meant to be
overriden).&lt;/p>
&lt;p>A lot of the time making a method static also reveals others can be static too
(those calling it), which can end up uncovering a set of methods that makes
sense to extract into a utility class.&lt;/p>
&lt;h2 id="exposing-temporal-coupling">Exposing temporal coupling&lt;/h2>
&lt;p>Static methods also make explicit any &lt;em>temporal coupling&lt;/em>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. As a rough example,
say you have the following:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">SomeClass&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> Map&lt;span style="color:#666">&amp;lt;&lt;/span>String&lt;span style="color:#666">,&lt;/span> String&lt;span style="color:#666">&amp;gt;&lt;/span> map &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#a2f;font-weight:bold">new&lt;/span> HashMap&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">someMethod&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#080;font-style:italic">/* ... some code ... */&lt;/span>
computeMapEntries&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* ... a bunch of other code ... */&lt;/span>
doSomethingWithMap&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">computeMapEntries&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span> &lt;span style="color:#080;font-style:italic">/* something */&lt;/span> &lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">doSomethingWithMap&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span> &lt;span style="color:#080;font-style:italic">/* something */&lt;/span> &lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In such a code, having the map entries computed is a prerequisite for calling
&lt;code>doSomethingWithMap()&lt;/code>, which will use those values. There is thus a temporal
coupling between both methods, but this is nowhere specified nor enforced. It
could be that as part of future changes, someone reorders the calls and
introduces a bug. If, however, &lt;code>doSomethingWithMap()&lt;/code> took the map as a
parameter, then the dependency is made explicit. Assuming no other instance
field needs to be accessed, then &lt;code>doSomethingWithMap()&lt;/code> can be static, which
would enforce the dependency (the implementation cannot unexpectedly reference
the map nor any other such field). We might then be able also to avoid defining
&lt;code>map&lt;/code> as an instance variable entirely and instead declare it only inside
&lt;code>someMethod()&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">SomeClass&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">someMethod&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#080;font-style:italic">/* ... some code ... */&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">final&lt;/span> Map&lt;span style="color:#666">&amp;lt;&lt;/span>String&lt;span style="color:#666">,&lt;/span> String&lt;span style="color:#666">&amp;gt;&lt;/span> map &lt;span style="color:#666">=&lt;/span> computeMapEntries&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* ... a bunch of other code ... */&lt;/span>
doSomethingWithMap&lt;span style="color:#666">(&lt;/span>map&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> Map&lt;span style="color:#666">&amp;lt;&lt;/span>String&lt;span style="color:#666">,&lt;/span> String&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#00a000">computeMapEntries&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span> &lt;span style="color:#080;font-style:italic">/* something */&lt;/span> &lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">doSomethingWithMap&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span> &lt;span style="color:#080;font-style:italic">/* something */&lt;/span> &lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>With this, we further reduced the scope of the variable, which helps to avoid
misuses, e.g. by having the IDE suggest it or auto-complete it in a place where
it wasn&amp;rsquo;t meant to be used. In particular, the following doesn&amp;rsquo;t compile anymore:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">doSomethingWithMap&lt;span style="color:#666">(&lt;/span>map&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* ... a bunch of other code ... */&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">final&lt;/span> Map&lt;span style="color:#666">&amp;lt;&lt;/span>String&lt;span style="color:#666">,&lt;/span> String&lt;span style="color:#666">&amp;gt;&lt;/span> map &lt;span style="color:#666">=&lt;/span> computeMapEntries&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="testability">Testability&lt;/h2>
&lt;p>Detractors of static methods sometimes argue that static methods worsen
testability as they cannot be overriden, and they are harder to mock (mocking
frameworks allow mocking static methods, with the downside that those tests
cannot be parallelized.) Why would one mock, for instance, &lt;code>Math.abs&lt;/code>? If the
method is &lt;a href="https://en.wikipedia.org/wiki/Pure_function">pure&lt;/a>, then that&amp;rsquo;s the
best case for testing: you can call the method with a bunch of inputs and assert
the outputs. If the static method uses some mutable dependency (for example a
database, or time such as with &lt;code>LocalDateTime.now()&lt;/code>), then I see why you&amp;rsquo;d want
to mock or somehow change that. But that&amp;rsquo;s because you are doing a bad usage of
a static method and should rethink your design (for instance, by using a
&lt;code>java.time.Clock&lt;/code> and calling &lt;code>LocalDateTime.now(clock)&lt;/code> instead). Also, mocks
should only be used for shared, unmanaged out-of-process dependencies &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>,
and since these dependencies tend to be few, most of the time you actually
shouldn&amp;rsquo;t be mocking.&lt;/p>
&lt;p>I won&amp;rsquo;t spend time here with other arguments such as &amp;ldquo;static methods are not
pure OOP&amp;rdquo;, whatever that means. Also, that presuposes pure OOP-ness is something
desirable.&lt;/p>
&lt;h2 id="instance-vs-static-method">Instance vs. static method&lt;/h2>
&lt;p>All this doesn&amp;rsquo;t mean we should turn all private instance methods into private
static ones by adding each referenced instance field as an argument to the
method. After all, we can always change:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">AnotherClass&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#0b0;font-weight:bold">int&lt;/span> intField&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> String stringField&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> Service service&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">method&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#080;font-style:italic">/* uses intField, stringField and service */&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>into:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">AnotherClass&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#0b0;font-weight:bold">int&lt;/span> intField&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> String stringField&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> Service service&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">static&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">method&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#0b0;font-weight:bold">int&lt;/span> intField&lt;span style="color:#666">,&lt;/span> String stringField&lt;span style="color:#666">,&lt;/span> Service service&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#080;font-style:italic">/* uses intField, stringField and service */&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>and pass the arguments when calling &lt;code>method()&lt;/code>.&lt;/p>
&lt;p>When the referenced state is immutable (e.g. it&amp;rsquo;s a final field which
points to an stateless service initialized on construction), then taking it as
an argument instead of directly referencing it is pointless and more verbose.&lt;/p>
&lt;p>The same is true if the referenced state is always valid, for example when the
object is shared and has some feature flag:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">volatile&lt;/span> &lt;span style="color:#0b0;font-weight:bold">boolean&lt;/span> featureEnabled&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">setFeatureEnabled&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#0b0;font-weight:bold">boolean&lt;/span> featureEnabled&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">this&lt;/span>&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">featureEnabled&lt;/span> &lt;span style="color:#666">=&lt;/span> featureEnabled
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then again, it makes sense to use the field directly in an instance method, as
both boolean states are valid (whether the feature is enabled or not is probably
something that some other thread defines).&lt;/p>
&lt;p>Another obvious case where we cannot make a method static&amp;mdash;even if no state is
used&amp;mdash;is when the method is meant to be overriden by subclasses.&lt;/p>
&lt;p>But these cases aside, I tend to make static any method that doesn&amp;rsquo;t depend on
an object&amp;rsquo;s state. The change can also be suggested, for instance, by Eclipse
(as a warning) or IntelliJ IDEA (as an inspection).&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Sometimes also found as &lt;em>sequential coupling&lt;/em>, temporal coupling goes back
to at least to Hunt and Thomas&amp;rsquo; book &lt;a href="https://en.wikipedia.org/wiki/The_Pragmatic_Programmer">The Pragmatic Programmer&lt;/a>. &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>&lt;a href="https://enterprisecraftsmanship.com/posts/when-to-mock/">When to Mock&lt;/a> &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item></channel></rss>