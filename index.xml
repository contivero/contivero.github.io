<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cristian Ontivero</title><link>https://contivero.github.io/</link><description>Recent content on Cristian Ontivero</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 01 Aug 2024 00:00:00 +0200</lastBuildDate><atom:link href="https://contivero.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Speeding Up Test Suite In Java</title><link>https://contivero.github.io/post/speeding-up-tests/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0200</pubDate><guid>https://contivero.github.io/post/speeding-up-tests/</guid><description>&lt;p>I once had the chance to speed up a test suite spanning multiple maven projects
which took over 4 hours to run. The suite had around 8100 tests, many of which
were integration tests using a Spring &lt;code>ApplicationContext&lt;/code>. I managed to get this
down to around 1h 20~30 mins, until other priorities prevented further
reductions.&lt;/p>
&lt;p>What follows is how this was achieved, and what things to watch out for.&lt;/p>
&lt;h2 id="using-a-single-jvm-for-the-tests-in-a-project">Using a single JVM for the tests in a project&lt;/h2>
&lt;p>The very first point is reusing forks in your maven-surefire-plugin and
maven-failsafe-plugin configurations. This is the default, but many of the
projects had &lt;code>&amp;lt;reuseForks&amp;gt;false&amp;lt;/reuseForks&amp;gt;&lt;/code>. Using &lt;code>false&lt;/code> means that for each
test class a new JVM is used. This makes it easier to keep tests isolated, since
no JVM-global state is preserved (e.g. static variables). The downside is that
this is costlier than using a single JVM for all tests, and Spring&amp;rsquo;s
&lt;code>ApplicationContext&lt;/code> caching cannot work. This leads us to the next point.&lt;/p>
&lt;h2 id="spring-applicationcontext-caching">Spring ApplicationContext caching&lt;/h2>
&lt;p>By default Spring keeps each application context it needs to create cached, and
reuses them whenever possible. For two tests to use the same application context
they not only need to point to the same configuration (using the same
&lt;code>locations&lt;/code> or &lt;code>classes&lt;/code> in &lt;code>@ContextConfiguration&lt;/code>), but a bunch of other
things. For instance, if a test specifies a different &lt;code>initializer&lt;/code>, then that
implies using a different application context (for further details refer to
&lt;code>MergedContextConfiguration&lt;/code>, which is what Spring uses as key for the map of
application contexts it uses as cache).&lt;/p>
&lt;p>Thus, one should try to use the same application context for all tests in a
project that run under the same JVM. Sometimes a different application context
makes sense, but the less the better, performance-wise.&lt;/p>
&lt;h2 id="watch-out-for-jvm-global-state">Watch out for JVM-global state&lt;/h2>
&lt;p>Once the tests run under the same JVM, global state matters more. As always, we
need to minimize its usage, and keep it in mind to avoid flaky tests. An obvious
example is System properties. Another example is EhCache, which supports using
it as a singleton (e.g. with Hibernate&amp;rsquo;s &lt;code>SingletonEhCacheRegionFactory&lt;/code>, or
calling &lt;code>CacheManager.create()&lt;/code>).&lt;/p>
&lt;p>Any JVM singleton carries issues, as changes to the state by one test can affect
subsequent ones if we don&amp;rsquo;t properly clean up after it. By JVM singleton I mean
a class using a standard implementation of the Singleton pattern, such as using
an enum (as recommended by Bloch in Effective Java), or a static field.
Singleton Spring beans can still be a problem (if they have state), but are a
bit less susceptible because different &lt;code>ApplicationContexts&lt;/code> can have different
instances, so at least tests running with different &lt;code>ApplicationContext&lt;/code> won&amp;rsquo;t
affect each other through that bean.&lt;/p>
&lt;p>Also, relying on such state complicates running tests in parallel, as then
if test A passes or not can depend on whether some other test B that also
modifies the same state runs at the same time or not.&lt;/p>
&lt;h2 id="watch-out-for-thread-bound-values">Watch out for thread-bound values&lt;/h2>
&lt;p>When relying on a &lt;code>ThredLocal&lt;/code> value, you need to make sure your tests clear it
after being done, and tests that depend on it set the appropriate value at the
beginning, even if this value is the default one (say, null). Both are solutions
to the same issue: if each test cleans up after using the thread-bound resource,
then later tests don&amp;rsquo;t need to set the default again, and if other tests set the
needed value at the start (even if it&amp;rsquo;s the default), then previous tests don&amp;rsquo;t
need to clean up. Having both is mostly for better resilience, and setting the
right value at the beginning (even if it&amp;rsquo;s the default) is being explicit about
a tests prerequisites, so it also works as documentation.&lt;/p>
&lt;h2 id="reusing-database-between-tests">Reusing database between tests&lt;/h2>
&lt;p>Starting up a database is costly, even when using an in-memory one such as
HSQLDB. Using a docker instance of the same DBMS as in production with
testcontainers is betterâ€”and costlier.&lt;/p>
&lt;p>It thus makes sense from a performance perspective to try to use a single
database for all tests in a suite. This of course introduces another point
through which different tests can affect each other. For example, if a test
creates two instances of an entity in a database, and then asserts that there
are actually two such instances in there, it can fail if some other test created
another instance before. This means we cannot:&lt;/p>
&lt;ol>
&lt;li>Run assertions about the whole state of a database table (aggregations such
as count, max or min can be problematic).&lt;/li>
&lt;li>Run statements that modify the whole state of a table, such as deleting all
rows.&lt;/li>
&lt;/ol>
&lt;p>As a practical example of (2), when initializing the application context, we had
some logic to create some default entries in the database (if missing) which we
could later expect to always be there (e.g. default currency, default language,
etc.) A test that deleted all data for one of these tables ended up corrupting
subsequent tests that expected such defaults to be in the database, but didn&amp;rsquo;t
find them (because they reused the &lt;code>ApplicationContext&lt;/code>, so the defaults weren&amp;rsquo;t
re-created).&lt;/p>
&lt;p>How should different tests use the same database then? One option is expecting
each test to clean up after itself. This can work, but is of course error-prone,
as it&amp;rsquo;s easy for a developer to forget it (or not do it thoroughly enough), and
end up causing hard-to-track flaky tests. The other side of the same coin is
expecting each test to make sure the database is in the right state before
running (i.e. by clearing the needed tables). But this suffers from the same
downsides.&lt;/p>
&lt;p>Another frequently used approach is recreating the whole DB when a test starts,
and dropping the whole DB at the end of it. This can be easier to automatize,
and then avoids the previously mentioned issue. All three approaches though
complicate parallelizing tests, since having two tests that need the same
database table run in parallel can easily lead to race conditions.&lt;/p>
&lt;p>A better option is randomizing test data. By creating fresh, unique entries
in the database that are sufficiently random, then&lt;/p>
&lt;ol>
&lt;li>Tests are less likely to affect each other. Of course the initial
restrictions still apply: running aggregation functions on tables or performing
statements that alter state that other tests need (such as deleting all entries
in a table) are still problematic. Tests need to run assertions specific to the
data they create, but this is seldom a problem.&lt;/li>
&lt;li>There is no need to clean up between tests. Tests can freely pollute the
database, and some argue this is even more realistic, as it&amp;rsquo;s closer to how it
would be in production (it&amp;rsquo;s artificial to always have a clean empty database
for each use-case).&lt;/li>
&lt;li>Lastly, they are amenable to parallelization, because no clean up is
performed, and because with sufficiently random data no unique constraint
should be violated.&lt;/li>
&lt;/ol>
&lt;p>To support this, the creation of frequently used entities can be encapsulated in
some helper classes. JUnit 5 extensions can also reduce a lot of the boilerplate
(so that registering an extension will create a bunch of randomized entities and
their needed relations), and there is even some libraries that can simplify this
further (e.g. instancio).&lt;/p></description></item><item><title>Class as Alternative to Parameter Threading</title><link>https://contivero.github.io/post/class-as-alternative-to-parameter-threading/</link><pubDate>Wed, 31 Jul 2024 00:00:00 +0200</pubDate><guid>https://contivero.github.io/post/class-as-alternative-to-parameter-threading/</guid><description>&lt;p>Instead of injecting values through method arguments and having to keep passing
them wherever they are needed, consider creating an immutable object which
encapsulates the logic and the needed values which are set on creation.&lt;/p>
&lt;p>One benefit of this is improved readability. For instance, suppose we
have two sets, one of valid codes for something (&lt;code>validCodes&lt;/code>) and another of
allowed dates (&lt;code>allowedDates&lt;/code>). Compare:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">if&lt;/span> &lt;span style="color:#666">(&lt;/span>isValidCode&lt;span style="color:#666">(&lt;/span>validCodes&lt;span style="color:#666">,&lt;/span> code&lt;span style="color:#666">)&lt;/span>
&lt;span style="color:#666">&amp;amp;&lt;/span>&lt;span style="color:#666">&amp;amp;&lt;/span> isInAllowedDates&lt;span style="color:#666">(&lt;/span>allowedDates&lt;span style="color:#666">,&lt;/span> date&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#080;font-style:italic">/* do something */&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>vs.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">if&lt;/span> &lt;span style="color:#666">(&lt;/span>isValidCode&lt;span style="color:#666">(&lt;/span>code&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">&amp;amp;&lt;/span>&lt;span style="color:#666">&amp;amp;&lt;/span> isInAllowedDate&lt;span style="color:#666">(&lt;/span>date&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#080;font-style:italic">/* do something */&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This can be useful when a method starts by getting a bunch of values which don&amp;rsquo;t
change (say, getting a bunch of user IDs from the database for some kind of
processing). Storing these on the enclosing class means setting them in a
mutable (non-final) field, because these will be initialized in a method and not
in the constructor. As a trimmed-down example, consider the following code which
sends a coupon code:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">CouponCodeEmailSendingJob&lt;/span> &lt;span style="color:#a2f;font-weight:bold">implements&lt;/span> Runnable &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> UserService userService&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> MailService mailService&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> Set&lt;span style="color:#666">&amp;lt;&lt;/span>User&lt;span style="color:#666">&amp;gt;&lt;/span> users&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> String emailTemplate&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#00a000">CouponCodeEmailSendingJob&lt;/span>&lt;span style="color:#666">(&lt;/span>UserService userService&lt;span style="color:#666">,&lt;/span> MailService mailService&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">this&lt;/span>&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">userService&lt;/span> &lt;span style="color:#666">=&lt;/span> userService&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">this&lt;/span>&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">mailService&lt;/span> &lt;span style="color:#666">=&lt;/span> mailService&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">run&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
users &lt;span style="color:#666">=&lt;/span> userService&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">getUsers&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
emailTemplate &lt;span style="color:#666">=&lt;/span> mailService&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">getCurrentEmailTemplate&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* more code */&lt;/span>
sendEmails&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* mode code */&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">sendEmails&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">for&lt;/span> &lt;span style="color:#666">(&lt;/span>User user &lt;span style="color:#666">:&lt;/span> users&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
mailService&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">sendCouponCodeEmail&lt;/span>&lt;span style="color:#666">(&lt;/span>user&lt;span style="color:#666">,&lt;/span> emailTemplate&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>For starters, the temporal dependency between assigning fields and using them
isn&amp;rsquo;t explicit. In such small example it might be obvious, but the less I need
to think and keep track off, the better. If we were dealing with a more complex
case as it usually is, we might end up re-ordering statements so that we attempt
to send emails before the users and emailTemplate fields are set. Presumably
such glarious mistake would pop-up during testing, but it still would make us
lose time.&lt;/p>
&lt;p>We can make the dependency explicit by taking both as parameters for
&lt;code>sendEmails&lt;/code>, and making the variables local to the method and not fields.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java"> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> Set&lt;span style="color:#666">&amp;lt;&lt;/span>User&lt;span style="color:#666">&amp;gt;&lt;/span> users &lt;span style="color:#666">=&lt;/span> userService&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">getUsers&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">final&lt;/span> String emailTemplate &lt;span style="color:#666">=&lt;/span> mailService&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">getCurrentEmailTemplate&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* more code */&lt;/span>
sendEmails&lt;span style="color:#666">(&lt;/span>users&lt;span style="color:#666">,&lt;/span> emailTemplate&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* mode code */&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, if we reorder the code in an incorrect manner, it won&amp;rsquo;t compile. This is an
improvement. But sometimes it&amp;rsquo;s not two parameters, but five, or more. And it&amp;rsquo;s
not a single private method, but several, and we need to keep threading the
parameters down to wherever they are needed. This can get unwidly fast.&lt;/p>
&lt;p>Thread-safety is another issue with the original code that we&amp;rsquo;ve improved upon.
In the first iteration of the code, by having &lt;code>users&lt;/code> and &lt;code>emailTemplate&lt;/code> be
non-final instance variables, if the &lt;code>Runnable&lt;/code> would be called in parallel,
then we might change the &lt;code>users&lt;/code> and &lt;code>emailTemplate&lt;/code> fields before the first
thread attempts to send the emails (e.g. if the &amp;ldquo;current&amp;rdquo; email template is
another by the time the second thread runs). Because of that, making them
variables local to the method&amp;rsquo;s scope is safer.&lt;/p>
&lt;p>But still the annoyance with threading parameters remains. In such cases,
defining them as fields in a new class allows us to avoid this, and potentially
move towards immutability, which would aid with making the code easier to
understand, and closer to being thread-safe.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">CouponCodeEmailSendingJob&lt;/span> &lt;span style="color:#a2f;font-weight:bold">implements&lt;/span> Runnable &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> UserService userService&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> MailService mailService&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#00a000">CouponCodeEmailSendingJob&lt;/span>&lt;span style="color:#666">(&lt;/span>UserService userService&lt;span style="color:#666">,&lt;/span> MailService mailService&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">this&lt;/span>&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">userService&lt;/span> &lt;span style="color:#666">=&lt;/span> userService&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">this&lt;/span>&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">mailService&lt;/span> &lt;span style="color:#666">=&lt;/span> mailService&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">run&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">new&lt;/span> InnerJob&lt;span style="color:#666">(&lt;/span>userService&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">getPremiumUsers&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">,&lt;/span> mailService&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">getCurrentEmailTemplate&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">)&lt;/span>
&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">run&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">InnerJob&lt;/span> &lt;span style="color:#a2f;font-weight:bold">implements&lt;/span> Runnable &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> Set&lt;span style="color:#666">&amp;lt;&lt;/span>User&lt;span style="color:#666">&amp;gt;&lt;/span> users&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> String emailTemplate&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#00a000">InnerJob&lt;/span>&lt;span style="color:#666">(&lt;/span>Set&lt;span style="color:#666">&amp;lt;&lt;/span>User&lt;span style="color:#666">&amp;gt;&lt;/span> users&lt;span style="color:#666">,&lt;/span> emailTemplate&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">this&lt;/span>&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">users&lt;/span> &lt;span style="color:#666">=&lt;/span> users&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">this&lt;/span>&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">emailTemplate&lt;/span> &lt;span style="color:#666">=&lt;/span> emailTemplate&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">run&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#080;font-style:italic">/* more code ... */&lt;/span>
sendEmails&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* more code ... */&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">sendEmail&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#666">/&lt;/span> &lt;span style="color:#666">*&lt;/span> &lt;span style="color:#666">.&lt;/span>&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#666">.&lt;/span> &lt;span style="color:#666">*&lt;/span> &lt;span style="color:#666">/&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#080;font-style:italic">/* ... */&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now if we ever need to run this in parallel, each run has its own instance of
&lt;code>InnerJob&lt;/code>, so we don&amp;rsquo;t need to worry about race conditions. &lt;code>InnerJob&lt;/code> could
even have mutable state (say, keep track of statistics for logging how many
emails were sent, how many failed, etc.), and it wouldn&amp;rsquo;t be an issue because
&lt;code>InnerJob&lt;/code> is never shared between threads.&lt;/p>
&lt;p>Of course we can still create implicit temporal couplings because the set of
users is shallowly immutable. A method could filter out some users from the set,
or add new ones, and then depending on when &lt;code>sendEmails()&lt;/code> is called, we would
send it to a set of users or another. Ideally though, we should treat the Set as
immutable and not modify it once it&amp;rsquo;s set. Any such filtering or additions
would be best performed before initializing &lt;code>InnerJob&lt;/code> with the &lt;code>Set&lt;/code> to use. If
so desired, we could enforce this by using some immutable set implementation
(e.g. by wrapping the &lt;code>Set&lt;/code> in &lt;code>Collections.unmodifiableSet&lt;/code>), but for small,
contained pieces of code, this is usually not needed.&lt;/p></description></item><item><title>Development Configuration</title><link>https://contivero.github.io/post/development-configuration/</link><pubDate>Tue, 16 Apr 2024 21:00:00 +0200</pubDate><guid>https://contivero.github.io/post/development-configuration/</guid><description>&lt;p>After upgrading my machine at work, I had to migrate my configuration, and even
remember some forgotten details about it. This is an attempt to document them
for future reference:&lt;/p>
&lt;h2 id="git-config">Git config:&lt;/h2>
&lt;p>Prerequisite: &lt;a href="https://github.com/dandavison/delta">delta&lt;/a>.&lt;/p>
&lt;pre>&lt;code>[user]
email = work.email@here
name = Cristian A. Ontivero
[diff]
algorithm = histogram
[merge]
conflictstyle = zdiff3
[pack]
useSparse = true
[pull]
rebase = true
[pager]
diff = delta
log = delta
reflog = delta
show = delta
[interactive]
diffFilter = delta --color-only
[delta]
features = line-numbers decorations
whitespace-error-style = 22 reverse
[delta &amp;quot;decorations&amp;quot;]
commit-decoration-style = bold yellow box ul
file-style = bold yellow ul
file-decoration-style = none
[core]
bare = false
compression = 9
editor = vim -c 'startinsert!'
filemode = false
ignorecase = true
logallrefupdates = true
repositoryformatversion = 0
symlinks = false
pager = less -x1,5
hooksPath = githooks
&lt;/code>&lt;/pre>&lt;p>Some explanations:&lt;/p>
&lt;ol>
&lt;li>According to a &lt;a href="https://link.springer.com/article/10.1007/s10664-019-09772-z">2019 paper&lt;/a>, the histogram diff algorithm tends to create better patches, leading to less merge conflicts. Of course, it&amp;rsquo;s not the best algorithm for every case, but it is a sensible default.&lt;/li>
&lt;li>Zealous diff3 (zdiff3) as conflictstyle for merges is quite useful, since it provides more context, and even attempts to solve in part the conflict by extracting out shared snippets of code when it&amp;rsquo;s safe to do so.&lt;/li>
&lt;li>&lt;code>useSparse = true&lt;/code> under &lt;code>pack&lt;/code> enables an &lt;a href="https://devblogs.microsoft.com/devops/exploring-new-frontiers-for-git-push-performance/">algorithm developed by Microsoft to improve the performance when pushing large repos&lt;/a>. Though having this enabled now is the default.&lt;/li>
&lt;/ol>
&lt;h2 id="shell">Shell&lt;/h2>
&lt;p>I&amp;rsquo;ve gotten used to zsh. For the prompt, I&amp;rsquo;ve been using &lt;a href="https://github.com/olivierverdier/zsh-git-prompt">zsh-git-prompt&lt;/a> for a couple of years already without complaints. It hasn&amp;rsquo;t been maintained for around a decade, but it does it job and does it well.&lt;/p>
&lt;p>I have a couple of aliases to ease frequent git uses in my .zshrc. The first two make use of &lt;a href="https://github.com/bigH/git-fuzzy">git-fuzzy&lt;/a>:&lt;/p>
&lt;pre>&lt;code>alias gfs=&amp;quot;git fuzzy status&amp;quot;
alias gfb=&amp;quot;git fuzzy branch&amp;quot;
alias go=&amp;quot;git checkout&amp;quot;
alias gca=&amp;quot;git commit --amend --date=now&amp;quot;
alias gri=&amp;quot;git rebase -i&amp;quot;
alias gd=&amp;quot;git diff&amp;quot;
alias gdc=&amp;quot;git diff --cached&amp;quot;
alias gom=&amp;quot;git checkout master&amp;quot;
alias gor=&amp;quot;git checkout release&amp;quot;
alias gorc=&amp;quot;git checkout release-candidate&amp;quot;
&lt;/code>&lt;/pre>&lt;p>The last ones of course depend on which branches you deal with frequently in your day-to-day project.&lt;/p>
&lt;h2 id="eclipse-java-development">Eclipse (Java development):&lt;/h2>
&lt;ul>
&lt;li>Full name in javadocs &lt;code>@author&lt;/code> tag: add &lt;code>-Duser.name=DESIRED NAME&lt;/code> in eclipse.ini&lt;/li>
&lt;li>One can tell Eclipse from where to suggest imports by adding them in Java &amp;gt; Editor &amp;gt; Content Assistant &amp;gt; Favorites. Some useful ones are:
&lt;ul>
&lt;li>&lt;code>java.util.Arrays.*&lt;/code> (&lt;code>asList()&lt;/code>)&lt;/li>
&lt;li>&lt;code>java.util.Collections.*&lt;/code>(&lt;code>emptyList()&lt;/code>, &lt;code>emptyMap()&lt;/code>, &lt;code>singletonList()&lt;/code>, etc.)&lt;/li>
&lt;li>&lt;code>java.util.Comparator.*&lt;/code>(&lt;code>comparing()&lt;/code>)&lt;/li>
&lt;li>&lt;code>java.util.stream.Collectors.*&lt;/code> (&lt;code>toSet()&lt;/code>, &lt;code>toList()&lt;/code>, etc.)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Java &amp;gt; Editor &amp;gt; Templates:
&lt;ul>
&lt;li>To add a Log4J logger:&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>${:import(org.apache.logging.log4j.Logger,org.apache.logging.log4j.LogManager)}
private static final Logger logger = LogManager.getLogger();
&lt;/code>&lt;/pre>&lt;h2 id="vim">Vim&lt;/h2>
&lt;p>There is a sea of configurations and plugins available for vim. The bare basics I like having pertain git commit messages. In &lt;code>.vimrc&lt;/code>, enable the filetype plugin:&lt;/p>
&lt;pre>&lt;code>filetype plugin on
au FileType gitcommit setlocal tw=72
&lt;/code>&lt;/pre>&lt;p>Then, inside &lt;code>~/.vim/ftplugin/gitcommit.vim&lt;/code>:&lt;/p>
&lt;pre>&lt;code>&amp;quot; Enable spell checking to avoid spelling mistakes in commit messages
set spell spelllang=en_us
set smartindent
&amp;quot; Show line at limit of commit message length
set ruler
set colorcolumn=+1
highlight ColorColumn ctermbg=lightgrey guibg=lightgrey
&lt;/code>&lt;/pre></description></item><item><title>Self Proxy Injection Anti-Pattern</title><link>https://contivero.github.io/post/self-proxy-injection-anti-pattern/</link><pubDate>Wed, 26 Apr 2023 07:45:13 +0200</pubDate><guid>https://contivero.github.io/post/self-proxy-injection-anti-pattern/</guid><description>&lt;p>Because of how Spring&amp;rsquo;s implementation of AOP works (i.e. proxies), internal
calls to a method in a proxied bean cannot be intercepted. This is a limitation
of any AOP implementation using dynamic proxies. A way I&amp;rsquo;ve seen used to bypass
this limitation is having an object with a dependency on itself, so that, for
instance, internal calls to methods can also be cached when using a cache
proxy&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. Something like the following:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">ServiceImpl&lt;/span> &lt;span style="color:#a2f;font-weight:bold">implements&lt;/span> Service&lt;span style="color:#666">,&lt;/span> ApplicationContextAware &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> Service cachedService&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> ApplicationContext applicationContext&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> Service &lt;span style="color:#00a000">getCachedService&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">if&lt;/span> &lt;span style="color:#666">(&lt;/span>cachedService &lt;span style="color:#666">=&lt;/span>&lt;span style="color:#666">=&lt;/span> &lt;span style="color:#a2f;font-weight:bold">null&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
cachedService &lt;span style="color:#666">=&lt;/span> applicationContext&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">getBean&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#b44">&amp;#34;Service&amp;#34;&lt;/span>&lt;span style="color:#666">,&lt;/span> Service&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">class&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">return&lt;/span> cachedService&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> Collection&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">?&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span> aCachedMethod&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#080;font-style:italic">/* some expensiven computation of a collection */&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> String &lt;span style="color:#00a000">getSomething&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
Collection&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">?&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span> collection &lt;span style="color:#666">=&lt;/span> getCachedService&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">aCachedMethod&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">return&lt;/span> &lt;span style="color:#080;font-style:italic">/* some computation with the collection */&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Though this might seem ingenious to some, this is essentially a cyclic
dependency. Problems with the previous snippet of code are:&lt;/p>
&lt;ol>
&lt;li>It uses the &lt;a href="https://blog.ploeh.dk/2010/02/03/ServiceLocatorisanAnti-Pattern/">Service Locator anti-pattern&lt;/a>,
manually getting the proxied &lt;code>Service&lt;/code> from the DI container, instead of
getting it injected as a dependency.&lt;/li>
&lt;li>Whoever maintains the code needs to know and remember to use &lt;code>getCachedService()&lt;/code>
instead of using &lt;code>cachedService&lt;/code> directly, which would bypass the cache and could
even result in a &lt;code>NullPointerException&lt;/code>.&lt;/li>
&lt;/ol>
&lt;p>We could tackle (1), and partially (2) by using property injection:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">ServiceImpl&lt;/span> &lt;span style="color:#a2f;font-weight:bold">implements&lt;/span> Service &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> Service cachedService&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">setCachedService&lt;/span>&lt;span style="color:#666">(&lt;/span>Service cachedService&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">this&lt;/span>&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">cachedService&lt;/span> &lt;span style="color:#666">=&lt;/span> cachedService&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> String &lt;span style="color:#00a000">getSomething&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
Collection&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">?&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span> collection &lt;span style="color:#666">=&lt;/span> getCachedService&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">aCachedMethod&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">return&lt;/span> &lt;span style="color:#080;font-style:italic">/* some computation with the collection */&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>However, the problem that you need to know about &lt;code>cachedService&lt;/code> and remember to
use it remains. Also, we cannot make the field final and get it injected with
constructor injection.&lt;/p>
&lt;p>The solution is the same as for any cyclic dependency: split the class. Those
methods that we want to call and be sure are being cached should be in another
class. Then all problems go away:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">ServiceImpl&lt;/span> &lt;span style="color:#a2f;font-weight:bold">implements&lt;/span> Service &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> AnotherService anotherService&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#00a000">ServiceImpl&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#a2f;font-weight:bold">final&lt;/span> AnotherService anotherService&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">this&lt;/span>&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">anotherService&lt;/span> &lt;span style="color:#666">=&lt;/span> anotherService&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> String &lt;span style="color:#00a000">getSomething&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
Collection&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">?&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span> collection &lt;span style="color:#666">=&lt;/span> anotherService&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">aCachedMethod&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">return&lt;/span> &lt;span style="color:#080;font-style:italic">/* some computation with the collection */&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now the only way to call the method needed is through &lt;code>anotherService&lt;/code>, so
it&amp;rsquo;s not possible to miss using it and bypass the caching.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Also suggested for instance &lt;a href="https://stackoverflow.com/questions/13564627/spring-aop-not-working-for-method-call-inside-another-method">here&lt;/a>. &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Towards a Typesafe Map</title><link>https://contivero.github.io/post/towards-a-type-safe-map/</link><pubDate>Sun, 02 Oct 2022 23:22:00 +0200</pubDate><guid>https://contivero.github.io/post/towards-a-type-safe-map/</guid><description>&lt;p>Say we want a heterogeneous &lt;code>Map&lt;/code> in java, i.e. a map where the values have
different types. Let&amp;rsquo;s further assume we know the possible keys at compile time.&lt;/p>
&lt;h2 id="barebones-solution">Barebones solution&lt;/h2>
&lt;p>The simplest approach would be having a &lt;code>Map&amp;lt;String, Object&amp;gt;&lt;/code> (or whatever other
key type). We would need to remember which key corresponds to which type, and do
the proper casts:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">String value1 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#666">(&lt;/span>String&lt;span style="color:#666">)&lt;/span> map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">get&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#b44">&amp;#34;someStringKey&amp;#34;&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#0b0;font-weight:bold">boolean&lt;/span> value2 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#666">(&lt;/span>&lt;span style="color:#0b0;font-weight:bold">boolean&lt;/span>&lt;span style="color:#666">)&lt;/span> map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">get&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#b44">&amp;#34;someBooleanKey&amp;#34;&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* etc. */&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is of course error-prone, delegating to the programmer what should be the
task of the compiler.&lt;/p>
&lt;h2 id="introducing-generics-classes-as-keys">Introducing generics: classes as keys&lt;/h2>
&lt;p>A better option is relying on generics for type safety. One such option is
found for instance in Joshua Bloch&amp;rsquo;s Effective Java, Item 33 (Consider typesafe
heterogeneous containers). This looks as follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">HeterogeneousMap&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> Map&lt;span style="color:#666">&amp;lt;&lt;/span>Class&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">?&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">,&lt;/span> Object&lt;span style="color:#666">&amp;gt;&lt;/span> map &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#a2f;font-weight:bold">new&lt;/span> HashMap&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">put&lt;/span>&lt;span style="color:#666">(&lt;/span>Class&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> key&lt;span style="color:#666">,&lt;/span> T value&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">put&lt;/span>&lt;span style="color:#666">(&lt;/span>key&lt;span style="color:#666">,&lt;/span> value&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> T &lt;span style="color:#00a000">get&lt;/span>&lt;span style="color:#666">(&lt;/span>Class&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> key&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">return&lt;/span> key&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">cast&lt;/span>&lt;span style="color:#666">(&lt;/span>map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">get&lt;/span>&lt;span style="color:#666">(&lt;/span>key&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>With this, we can operate with the map as follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">HeterogeneousMap map &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#a2f;font-weight:bold">new&lt;/span> HeterogeneousMap&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">put&lt;/span>&lt;span style="color:#666">(&lt;/span>Integer&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">class&lt;/span>&lt;span style="color:#666">,&lt;/span> 5&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">put&lt;/span>&lt;span style="color:#666">(&lt;/span>String&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">class&lt;/span>&lt;span style="color:#666">,&lt;/span> &lt;span style="color:#b44">&amp;#34;High&amp;#34;&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
System&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">out&lt;/span>&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">println&lt;/span>&lt;span style="color:#666">(&lt;/span>map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">get&lt;/span>&lt;span style="color:#666">(&lt;/span>String&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">class&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">+&lt;/span> map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">get&lt;/span>&lt;span style="color:#666">(&lt;/span>Integer&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">class&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#080;font-style:italic">// prints: High 5
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This has the limitation that we can have at most one value of each class.&lt;/p>
&lt;h2 id="adding-a-polymorphic-key-type">Adding a polymorphic key type&lt;/h2>
&lt;p>To surmount the previous limitation, we can define a type to act as key which
has one type argument. We can then declare the different instances as public
constants, as a kind of handrolled enum:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">Key&lt;/span>&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">static&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> Key&lt;span style="color:#666">&amp;lt;&lt;/span>Integer&lt;span style="color:#666">&amp;gt;&lt;/span> KEY1 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#a2f;font-weight:bold">new&lt;/span> Key&lt;span style="color:#666">(&lt;/span>Integer&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">class&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">static&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> Key&lt;span style="color:#666">&amp;lt;&lt;/span>Integer&lt;span style="color:#666">&amp;gt;&lt;/span> KEY2 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#a2f;font-weight:bold">new&lt;/span> Key&lt;span style="color:#666">(&lt;/span>Integer&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">class&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">static&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> Key&lt;span style="color:#666">&amp;lt;&lt;/span>String&lt;span style="color:#666">&amp;gt;&lt;/span> KEY3 &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#a2f;font-weight:bold">new&lt;/span> Key&lt;span style="color:#666">(&lt;/span>String&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">class&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* etc. */&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#00a000">Key&lt;/span>&lt;span style="color:#666">(&lt;/span>Class&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> v&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span> &lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that the type as such is a &lt;em>phantom type&lt;/em>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>, though it needen&amp;rsquo;t be, as we
could store the class or other values if so desired. With such defintion, our
map implementation would be:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">HeterogeneousMap&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> Map&lt;span style="color:#666">&amp;lt;&lt;/span>Key&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">?&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">,&lt;/span> Object&lt;span style="color:#666">&amp;gt;&lt;/span> map &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#a2f;font-weight:bold">new&lt;/span> HashMap&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">put&lt;/span>&lt;span style="color:#666">(&lt;/span>Key&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> key&lt;span style="color:#666">,&lt;/span> T value&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">put&lt;/span>&lt;span style="color:#666">(&lt;/span>key&lt;span style="color:#666">,&lt;/span> value&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> T &lt;span style="color:#00a000">get&lt;/span>&lt;span style="color:#666">(&lt;/span>Key&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> key&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">return&lt;/span> key&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">cast&lt;/span>&lt;span style="color:#666">(&lt;/span>map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">get&lt;/span>&lt;span style="color:#666">(&lt;/span>key&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>With such setup, we now can have more than one value with the same type, though
we rely on knowing the different keys at compile-time.&lt;/p>
&lt;h2 id="abstracting-further-simulating-higher-kinded-types">Abstracting further: simulating higher-kinded types&lt;/h2>
&lt;p>Now suppose we want to use instances of this map in different contexts with
different keys. For instance, we could have keys that represent user options:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">UserOption&lt;/span>&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">static&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> UserOption&lt;span style="color:#666">&amp;lt;&lt;/span>String&lt;span style="color:#666">&amp;gt;&lt;/span> TIMEZONE &lt;span style="color:#666">=&lt;/span> create&lt;span style="color:#666">(&lt;/span>String&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">class&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">static&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> UserOption&lt;span style="color:#666">&amp;lt;&lt;/span>String&lt;span style="color:#666">&amp;gt;&lt;/span> LANGUAGE &lt;span style="color:#666">=&lt;/span> create&lt;span style="color:#666">(&lt;/span>String&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">class&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">static&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> UserOption&lt;span style="color:#666">&amp;lt;&lt;/span>WebsiteTheme&lt;span style="color:#666">&amp;gt;&lt;/span> THEME &lt;span style="color:#666">=&lt;/span> create&lt;span style="color:#666">(&lt;/span>WebsiteTheme&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">class&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* etc. */&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#00a000">UserOption&lt;/span>&lt;span style="color:#666">(&lt;/span>Class&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> v&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span> &lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">static&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span>V&lt;span style="color:#666">&amp;gt;&lt;/span> UserOption&lt;span style="color:#666">&amp;lt;&lt;/span>V&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#00a000">create&lt;/span>&lt;span style="color:#666">(&lt;/span>Class&lt;span style="color:#666">&amp;lt;&lt;/span>V&lt;span style="color:#666">&amp;gt;&lt;/span> c&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">return&lt;/span> &lt;span style="color:#a2f;font-weight:bold">new&lt;/span> UserOption&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">(&lt;/span>c&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>and some other keys that represent optional parameters to some service method:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">OptionalParameter&lt;/span>&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">static&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> OptionalParameter&lt;span style="color:#666">&amp;lt;&lt;/span>String&lt;span style="color:#666">&amp;gt;&lt;/span> SOME_PARAM &lt;span style="color:#666">=&lt;/span> create&lt;span style="color:#666">(&lt;/span>String&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">class&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">static&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> OptionalParameter&lt;span style="color:#666">&amp;lt;&lt;/span>Long&lt;span style="color:#666">&amp;gt;&lt;/span> ANOTHER_PARAM &lt;span style="color:#666">=&lt;/span> create&lt;span style="color:#666">(&lt;/span>Long&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">class&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* etc. */&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#00a000">OptionalParameter&lt;/span>&lt;span style="color:#666">(&lt;/span>Class&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> v&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span> &lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">static&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span>V&lt;span style="color:#666">&amp;gt;&lt;/span> OptionalParameter&lt;span style="color:#666">&amp;lt;&lt;/span>V&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#00a000">create&lt;/span>&lt;span style="color:#666">(&lt;/span>Class&lt;span style="color:#666">&amp;lt;&lt;/span>V&lt;span style="color:#666">&amp;gt;&lt;/span> c&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">return&lt;/span> &lt;span style="color:#a2f;font-weight:bold">new&lt;/span> OptionalParameter&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">(&lt;/span>c&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The problem with this is that we need &lt;code>HeterogeneousMap&lt;/code> to be generic on the type of key, something like the following:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">HeterogeneousMap&lt;/span>&lt;span style="color:#666">&amp;lt;&lt;/span>K&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> Map&lt;span style="color:#666">&amp;lt;&lt;/span>K&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">?&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">,&lt;/span> Object&lt;span style="color:#666">&amp;gt;&lt;/span> map &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#a2f;font-weight:bold">new&lt;/span> HashMap&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">put&lt;/span>&lt;span style="color:#666">(&lt;/span>K&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> key&lt;span style="color:#666">,&lt;/span> T value&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">put&lt;/span>&lt;span style="color:#666">(&lt;/span>key&lt;span style="color:#666">,&lt;/span> value&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> T &lt;span style="color:#00a000">get&lt;/span>&lt;span style="color:#666">(&lt;/span>K&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> key&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">return&lt;/span> key&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">cast&lt;/span>&lt;span style="color:#666">(&lt;/span>map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">get&lt;/span>&lt;span style="color:#666">(&lt;/span>key&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This would then allow us to define a &lt;code>HeterogeneousMap&amp;lt;OptionalParameter&amp;lt;?&amp;gt;&amp;gt;&lt;/code>,
&lt;code>HeterogeneousMap&amp;lt;UserOption&amp;lt;?&amp;gt;&amp;gt;&lt;/code>, etc. Unfortunately this doesn&amp;rsquo;t compile in
java. Java doesn&amp;rsquo;t have higher-kinded types &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>, which is precisely what we
need for this. We can simulate the feature up to a point as follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#080;font-style:italic">/* Marker interface for encoding a type F&amp;lt;T&amp;gt; of kind * -&amp;gt; *. */&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">interface&lt;/span> &lt;span style="color:#00f">H&lt;/span>&lt;span style="color:#666">&amp;lt;&lt;/span>F&lt;span style="color:#666">,&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#666">{&lt;/span>&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">OptionalParameter&lt;/span>&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#a2f;font-weight:bold">implements&lt;/span> H&lt;span style="color:#666">&amp;lt;&lt;/span>OptionalParameter&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">?&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">,&lt;/span> T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#080;font-style:italic">/* the rest is the same as before */&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">UserOption&lt;/span>&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#a2f;font-weight:bold">implements&lt;/span> H&lt;span style="color:#666">&amp;lt;&lt;/span>UserOption&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">?&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">,&lt;/span> T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#080;font-style:italic">/* the rest is the same as before */&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">HeterogeneousMap&lt;/span>&lt;span style="color:#666">&amp;lt;&lt;/span>S &lt;span style="color:#a2f;font-weight:bold">extends&lt;/span> H&lt;span style="color:#666">&amp;lt;&lt;/span>S&lt;span style="color:#666">,&lt;/span> &lt;span style="color:#666">?&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> Map&lt;span style="color:#666">&amp;lt;&lt;/span>Object&lt;span style="color:#666">,&lt;/span> Object&lt;span style="color:#666">&amp;gt;&lt;/span> map &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#a2f;font-weight:bold">new&lt;/span> HashMap&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span>K &lt;span style="color:#a2f;font-weight:bold">extends&lt;/span> H&lt;span style="color:#666">&amp;lt;&lt;/span>S&lt;span style="color:#666">,&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">,&lt;/span> T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">put&lt;/span>&lt;span style="color:#666">(&lt;/span>K key&lt;span style="color:#666">,&lt;/span> T value&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">put&lt;/span>&lt;span style="color:#666">(&lt;/span>key&lt;span style="color:#666">,&lt;/span> value&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f">@SuppressWarnings&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#b44">&amp;#34;unchecked&amp;#34;&lt;/span>&lt;span style="color:#666">)&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span>K &lt;span style="color:#a2f;font-weight:bold">extends&lt;/span> H&lt;span style="color:#666">&amp;lt;&lt;/span>S&lt;span style="color:#666">,&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">,&lt;/span> T&lt;span style="color:#666">&amp;gt;&lt;/span> T &lt;span style="color:#00a000">get&lt;/span>&lt;span style="color:#666">(&lt;/span>K key&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">return&lt;/span> &lt;span style="color:#666">(&lt;/span>T&lt;span style="color:#666">)&lt;/span> map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">get&lt;/span>&lt;span style="color:#666">(&lt;/span>key&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>With this we&amp;rsquo;ve almost managed to get what we wanted. We can operate with the map as follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">HeterogeneousMap&lt;span style="color:#666">&amp;lt;&lt;/span>UserOption&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">?&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span> map &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#a2f;font-weight:bold">new&lt;/span> HeterogeneousMap&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">put&lt;/span>&lt;span style="color:#666">(&lt;/span>UserOption&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">TIMEZONE&lt;/span>&lt;span style="color:#666">,&lt;/span> &lt;span style="color:#b44">&amp;#34;America/Argentina/Buenos_Aires&amp;#34;&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">put&lt;/span>&lt;span style="color:#666">(&lt;/span>UserOption&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">THEME&lt;/span>&lt;span style="color:#666">,&lt;/span> WebsiteTheme&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">DARK&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
String timezone &lt;span style="color:#666">=&lt;/span> map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">get&lt;/span>&lt;span style="color:#666">(&lt;/span>UserOption&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">TIMEZONE&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
WebsiteTheme theme &lt;span style="color:#666">=&lt;/span> map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">get&lt;/span>&lt;span style="color:#666">(&lt;/span>UserOption&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">THEME&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* etc. */&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>as can be seen, we can put stuff into the map using the &lt;code>UserOption&lt;/code> constants, and don&amp;rsquo;t need any casting when getting values out.
Additionally, none of the following compile:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#080;font-style:italic">/* Putting a value of the wrong type for the given key */&lt;/span>
map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">put&lt;/span>&lt;span style="color:#666">(&lt;/span>UserOption&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">TIMEZONE&lt;/span>&lt;span style="color:#666">,&lt;/span> 3&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* Getting a value of the wrong type from the map */&lt;/span>
String timezone &lt;span style="color:#666">=&lt;/span> map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">get&lt;/span>&lt;span style="color:#666">(&lt;/span>UserOption&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">THEME&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* Wrong key type. Though SOME_PARAM represents a string parameter, we declared
&lt;/span>&lt;span style="color:#080;font-style:italic"> * the map for UserOption, not for OptionalParameter */&lt;/span>
map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">put&lt;/span>&lt;span style="color:#666">(&lt;/span>OptionalParameter&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">SOME_PARAM&lt;/span>&lt;span style="color:#666">,&lt;/span> &lt;span style="color:#b44">&amp;#34;extraString&amp;#34;&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* As before, the map was declared for UserOption, so we cannot use
&lt;/span>&lt;span style="color:#080;font-style:italic"> * OptionalParameter as key */&lt;/span>
String extraParam &lt;span style="color:#666">=&lt;/span> map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">get&lt;/span>&lt;span style="color:#666">(&lt;/span>OptionalParameter&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">SOME_PARAM&lt;/span>&lt;span style="color:#666">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The limitation with this is that we have no way of enforcing that a type
implements &lt;code>H&lt;/code> the right way. As an example, we could have:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">OptionalParameter&lt;/span>&lt;span style="color:#666">&amp;lt;&lt;/span>T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#a2f;font-weight:bold">implements&lt;/span> H&lt;span style="color:#666">&amp;lt;&lt;/span>UserOption&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">?&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">,&lt;/span> T&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#080;font-style:italic">/* the rest is the same as before */&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">HeterogeneousMap&lt;span style="color:#666">&amp;lt;&lt;/span>UserOption&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">?&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span> map &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#a2f;font-weight:bold">new&lt;/span> HeterogeneousMap&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">put&lt;/span>&lt;span style="color:#666">(&lt;/span>OptionalParameter&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">INTEGER_PARAM&lt;/span>&lt;span style="color:#666">,&lt;/span> 3&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
map&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">get&lt;/span>&lt;span style="color:#666">(&lt;/span>OptionalParameter&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">INTEGER_PARAM&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In other words, we&amp;rsquo;ve managed to use keys of type &lt;code>OptionalParameter&lt;/code> in a
map meant for &lt;code>UserOption&lt;/code> keys. It is possible to avoid this by using an
annotation processor to prohibit (having a compilation error) a type &lt;code>T&lt;/code>
implementing &lt;code>H&lt;/code> with an argument other than itself. This is what projects such
as &lt;a href="https://github.com/derive4j/hkt">derive4j/hkt&lt;/a> do, but I won&amp;rsquo;t go now
further in that direction.&lt;/p>
&lt;p>The technique is still useful as is, for instance when one controls the code and
knows to abide by the restriction that whenever a new type &lt;code>K&amp;lt;T&amp;gt;&lt;/code> of key wants
to be used, that type needs to implement &lt;code>H&amp;lt;K&amp;lt;?&amp;gt;,T&amp;gt;&lt;/code>.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>A phantom type is a type with a type parameter which isn&amp;rsquo;t used (in
methods nor fields). The definition might change slightly based on the language
where it&amp;rsquo;s used, but the gist is the same. Their use is known in languages such
as Haskell and Rust, though Java supports them too. &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Kind_(type_theory)">https://en.wikipedia.org/wiki/Kind_(type_theory)&lt;/a> &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Thoughts on static methods</title><link>https://contivero.github.io/post/thoughts-on-static-methods/</link><pubDate>Mon, 15 Aug 2022 08:00:00 +0200</pubDate><guid>https://contivero.github.io/post/thoughts-on-static-methods/</guid><description>&lt;p>I&amp;rsquo;ve had to argue more than once why I&amp;rsquo;m making some method static, so I decided
to write it down.&lt;/p>
&lt;p>Methods that use no instance variables should be made static. Making the
method static restricts its possibilities, making it easier to reason about.
It&amp;rsquo;s more restricted in the sense that it&amp;rsquo;s impossible for it to mutate any
instance variable of the class where it&amp;rsquo;s defined. If it&amp;rsquo;s static:&lt;/p>
&lt;ol>
&lt;li>You know it doesn&amp;rsquo;t reference any state of the class where it&amp;rsquo;s
defined; it can&amp;rsquo;t.&lt;/li>
&lt;li>It&amp;rsquo;s highly likely it has no side-effect on the object where it&amp;rsquo;s defined.
Sure, it could be mutating some static field, but that would most likely be
terrible design, so one can usually discard that. It&amp;rsquo;s also possible that it
mutates state of one of its arguments, so the method need not be side-effect
free. But all that and more is possible with instance methods too.&lt;/li>
&lt;/ol>
&lt;p>All this information is also instantly accessible through the IDE, because most
use italics by default for these methods (this tends to be configurable), so
when seeing the italics you know it&amp;rsquo;s some utility method with those
characteristics.&lt;/p>
&lt;p>It&amp;rsquo;s pointless to require instantiating an object to call a method that makes no
use of that object&amp;rsquo;s state (with the exception of methods meant to be
overriden).&lt;/p>
&lt;p>A lot of the time making a method static also reveals others can be static too
(those calling it), which can end up uncovering a set of methods that makes
sense to extract into a utility class.&lt;/p>
&lt;h2 id="exposing-temporal-coupling">Exposing temporal coupling&lt;/h2>
&lt;p>Static methods also make explicit any &lt;em>temporal coupling&lt;/em>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. As a rough example,
say you have the following:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">SomeClass&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> Map&lt;span style="color:#666">&amp;lt;&lt;/span>String&lt;span style="color:#666">,&lt;/span> String&lt;span style="color:#666">&amp;gt;&lt;/span> map &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#a2f;font-weight:bold">new&lt;/span> HashMap&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">someMethod&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#080;font-style:italic">/* ... some code ... */&lt;/span>
computeMapEntries&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* ... a bunch of other code ... */&lt;/span>
doSomethingWithMap&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">computeMapEntries&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span> &lt;span style="color:#080;font-style:italic">/* something */&lt;/span> &lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">doSomethingWithMap&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span> &lt;span style="color:#080;font-style:italic">/* something */&lt;/span> &lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In such a code, having the map entries computed is a prerequisite for calling
&lt;code>doSomethingWithMap()&lt;/code>, which will use those values. There is thus a temporal
coupling between both methods, but this is nowhere specified nor enforced. It
could be that as part of future changes, someone reorders the calls and
introduces a bug. If, however, &lt;code>doSomethingWithMap()&lt;/code> took the map as a
parameter, then the dependency is made explicit. Assuming no other instance
field needs to be accessed, then &lt;code>doSomethingWithMap()&lt;/code> can be static, which
would enforce the dependency (the implementation cannot unexpectedly reference
the map nor any other such field). We might then be able also to avoid defining
&lt;code>map&lt;/code> as an instance variable entirely and instead declare it only inside
&lt;code>someMethod()&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">SomeClass&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">someMethod&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#080;font-style:italic">/* ... some code ... */&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">final&lt;/span> Map&lt;span style="color:#666">&amp;lt;&lt;/span>String&lt;span style="color:#666">,&lt;/span> String&lt;span style="color:#666">&amp;gt;&lt;/span> map &lt;span style="color:#666">=&lt;/span> computeMapEntries&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* ... a bunch of other code ... */&lt;/span>
doSomethingWithMap&lt;span style="color:#666">(&lt;/span>map&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> Map&lt;span style="color:#666">&amp;lt;&lt;/span>String&lt;span style="color:#666">,&lt;/span> String&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#00a000">computeMapEntries&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span> &lt;span style="color:#080;font-style:italic">/* something */&lt;/span> &lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">doSomethingWithMap&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span> &lt;span style="color:#080;font-style:italic">/* something */&lt;/span> &lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>With this, we further reduced the scope of the variable, which helps to avoid
misuses, e.g. by having the IDE suggest it or auto-complete it in a place where
it wasn&amp;rsquo;t meant to be used. In particular, the following doesn&amp;rsquo;t compile anymore:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">doSomethingWithMap&lt;span style="color:#666">(&lt;/span>map&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* ... a bunch of other code ... */&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">final&lt;/span> Map&lt;span style="color:#666">&amp;lt;&lt;/span>String&lt;span style="color:#666">,&lt;/span> String&lt;span style="color:#666">&amp;gt;&lt;/span> map &lt;span style="color:#666">=&lt;/span> computeMapEntries&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="testability">Testability&lt;/h2>
&lt;p>Detractors of static methods sometimes argue that static methods worsen
testability as they cannot be overriden, and they are harder to mock (mocking
frameworks allow mocking static methods, with the downside that those tests
cannot be parallelized.) Why would one mock, for instance, &lt;code>Math.abs&lt;/code>? If the
method is &lt;a href="https://en.wikipedia.org/wiki/Pure_function">pure&lt;/a>, then that&amp;rsquo;s the
best case for testing: you can call the method with a bunch of inputs and assert
the outputs. If the static method uses some mutable dependency (for example a
database, or time such as with &lt;code>LocalDateTime.now()&lt;/code>), then I see why you&amp;rsquo;d want
to mock or somehow change that. But that&amp;rsquo;s because you are doing a bad usage of
a static method and should rethink your design (for instance, by using a
&lt;code>java.time.Clock&lt;/code> and calling &lt;code>LocalDateTime.now(clock)&lt;/code> instead). Also, mocks
should only be used for shared, unmanaged out-of-process dependencies &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>,
and since these dependencies tend to be few, most of the time you actually
shouldn&amp;rsquo;t be mocking.&lt;/p>
&lt;p>I won&amp;rsquo;t spend time here with other arguments such as &amp;ldquo;static methods are not
pure OOP&amp;rdquo;, whatever that means. Also, that presuposes pure OOP-ness is something
desirable.&lt;/p>
&lt;h2 id="instance-vs-static-method">Instance vs. static method&lt;/h2>
&lt;p>All this doesn&amp;rsquo;t mean we should turn all private instance methods into private
static ones by adding each referenced instance field as an argument to the
method. After all, we can always change:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">AnotherClass&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#0b0;font-weight:bold">int&lt;/span> intField&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> String stringField&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> Service service&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">method&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#080;font-style:italic">/* uses intField, stringField and service */&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>into:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">AnotherClass&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#0b0;font-weight:bold">int&lt;/span> intField&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> String stringField&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> Service service&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">static&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">method&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#0b0;font-weight:bold">int&lt;/span> intField&lt;span style="color:#666">,&lt;/span> String stringField&lt;span style="color:#666">,&lt;/span> Service service&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#080;font-style:italic">/* uses intField, stringField and service */&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>and pass the arguments when calling &lt;code>method()&lt;/code>.&lt;/p>
&lt;p>When the referenced state is immutable (e.g. it&amp;rsquo;s a final field which
points to an stateless service initialized on construction), then taking it as
an argument instead of directly referencing it is pointless and more verbose.&lt;/p>
&lt;p>The same is true if the referenced state is always valid, for example when the
object is shared and has some feature flag:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">volatile&lt;/span> &lt;span style="color:#0b0;font-weight:bold">boolean&lt;/span> featureEnabled&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">setFeatureEnabled&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#0b0;font-weight:bold">boolean&lt;/span> featureEnabled&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">this&lt;/span>&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">featureEnabled&lt;/span> &lt;span style="color:#666">=&lt;/span> featureEnabled
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then again, it makes sense to use the field directly in an instance method, as
both boolean states are valid (whether the feature is enabled or not is probably
something that some other thread defines).&lt;/p>
&lt;p>Another obvious case where we cannot make a method static&amp;mdash;even if no state is
used&amp;mdash;is when the method is meant to be overriden by subclasses.&lt;/p>
&lt;p>But these cases aside, I tend to make static any method that doesn&amp;rsquo;t depend on
an object&amp;rsquo;s state. The change can also be suggested, for instance, by Eclipse
(as a warning) or IntelliJ IDEA (as an inspection).&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Sometimes also found as &lt;em>sequential coupling&lt;/em>, temporal coupling goes back
to at least to Hunt and Thomas&amp;rsquo; book &lt;a href="https://en.wikipedia.org/wiki/The_Pragmatic_Programmer">The Pragmatic Programmer&lt;/a>. &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>&lt;a href="https://enterprisecraftsmanship.com/posts/when-to-mock/">When to Mock&lt;/a> &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>About</title><link>https://contivero.github.io/about/</link><pubDate>Sat, 13 Aug 2022 15:46:16 +0200</pubDate><guid>https://contivero.github.io/about/</guid><description>&lt;p>It&amp;rsquo;s said that writing is thinking. This is thus my attempt to think, mostly
regarding computer science and software engineering.&lt;/p>
&lt;p>A functional programmer trapped in an object-oriented world, trying to make
sense of it all.&lt;/p></description></item><item><title>Tail recursion</title><link>https://contivero.github.io/post/tail-recursion/</link><pubDate>Sat, 13 Aug 2022 13:25:02 +0200</pubDate><guid>https://contivero.github.io/post/tail-recursion/</guid><description>&lt;p>When a function&amp;rsquo;s last action is calling itself, we say it&amp;rsquo;s &lt;em>tail recursive&lt;/em>.
For instance, a tail recursive implementation of &lt;code>gcd&lt;/code> (the greatest common
divisor) in Haskell is as follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-haskell" data-lang="haskell">&lt;span style="color:#00a000">gcd&lt;/span> &lt;span style="color:#a2f;font-weight:bold">::&lt;/span> (&lt;span style="color:#0b0;font-weight:bold">Integral&lt;/span> a) &lt;span style="color:#a2f;font-weight:bold">=&amp;gt;&lt;/span> a &lt;span style="color:#a2f;font-weight:bold">-&amp;gt;&lt;/span> a &lt;span style="color:#a2f;font-weight:bold">-&amp;gt;&lt;/span> a
&lt;span style="color:#00a000">gcd&lt;/span> x y &lt;span style="color:#a2f;font-weight:bold">=&lt;/span> gcd&amp;#39; (abs x) (abs y)
&lt;span style="color:#a2f;font-weight:bold">where&lt;/span> gcd&amp;#39; a &lt;span style="color:#666">0&lt;/span> &lt;span style="color:#a2f;font-weight:bold">=&lt;/span> a
gcd&amp;#39; a b &lt;span style="color:#a2f;font-weight:bold">=&lt;/span> gcd&amp;#39; b (a `rem` b)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The interest in these functions is that they can be optimized easily by
compilers, which can replace the recursive implementation by a more performant
iterative one. A tail-recursive implementation is able to execute an iterative
process in constant space, even if the process is described by a recursive
procedure.&lt;/p>
&lt;p>The automatic optimization of tail recursions was popularized by
&lt;a href="https://en.wikipedia.org/wiki/Guy_L._Steele_Jr.">Guy L. Steele Jr.&lt;/a>
(although replacing a &lt;code>JSR&lt;/code> + &lt;code>RET&lt;/code> with &lt;code>JMP&lt;/code> was possibly known earlier).&lt;/p>
&lt;p>If there is a tail-recursive implementation of a function, then special
iteration constructs (e.g. while and for loops in you average imperative or
object-oriented language) are useful only as syntactic sugar, since the
iteration can otherwise be expressed by the usual function call.&lt;/p>
&lt;h2 id="further-examples">Further Examples:&lt;/h2>
&lt;p>A common definition of the &lt;code>length&lt;/code> of a list that can be found in books is as
follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-haskell" data-lang="haskell">&lt;span style="color:#00a000">length&lt;/span> &lt;span style="color:#a2f;font-weight:bold">::&lt;/span> [a] &lt;span style="color:#a2f;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#0b0;font-weight:bold">Int&lt;/span>
&lt;span style="color:#00a000">length&lt;/span> &lt;span style="color:#0b0;font-weight:bold">[]&lt;/span> &lt;span style="color:#a2f;font-weight:bold">=&lt;/span> &lt;span style="color:#666">0&lt;/span>
&lt;span style="color:#00a000">length&lt;/span> (x&lt;span style="color:#0b0;font-weight:bold">:&lt;/span>xs) &lt;span style="color:#a2f;font-weight:bold">=&lt;/span> &lt;span style="color:#666">1&lt;/span> &lt;span style="color:#666">+&lt;/span> length xs
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is not tail-recursive. Given that when asking for the length of a list, we
know that we will need to go to the end of it, it makes sense to define length
in a tail-recursive way:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-haskell" data-lang="haskell">&lt;span style="color:#00a000">length&lt;/span> &lt;span style="color:#a2f;font-weight:bold">::&lt;/span> [a] &lt;span style="color:#a2f;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#0b0;font-weight:bold">Int&lt;/span>
&lt;span style="color:#00a000">length&lt;/span> xs &lt;span style="color:#a2f;font-weight:bold">=&lt;/span> lenAcc xs &lt;span style="color:#666">0&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">where&lt;/span> lenAcc &lt;span style="color:#0b0;font-weight:bold">[]&lt;/span> n &lt;span style="color:#a2f;font-weight:bold">=&lt;/span> n
lenAcc (&lt;span style="color:#a2f;font-weight:bold">_&lt;/span>&lt;span style="color:#0b0;font-weight:bold">:&lt;/span>ys) n &lt;span style="color:#a2f;font-weight:bold">=&lt;/span> lenAcc ys (n&lt;span style="color:#666">+&lt;/span>&lt;span style="color:#666">1&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This definition is (with exception of &lt;code>where&lt;/code>) verbatim from Haskell&amp;rsquo;s prelude.&lt;/p>
&lt;p>The standard definition of filter is also not tail-recursive:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-haskell" data-lang="haskell">&lt;span style="color:#00a000">filter&lt;/span> &lt;span style="color:#a2f;font-weight:bold">_&lt;/span> &lt;span style="color:#0b0;font-weight:bold">[]&lt;/span> &lt;span style="color:#a2f;font-weight:bold">=&lt;/span> &lt;span style="color:#0b0;font-weight:bold">[]&lt;/span>
&lt;span style="color:#00a000">filter&lt;/span> p (x&lt;span style="color:#0b0;font-weight:bold">:&lt;/span>xs)
&lt;span style="color:#666">|&lt;/span> p x &lt;span style="color:#a2f;font-weight:bold">=&lt;/span> x &lt;span style="color:#0b0;font-weight:bold">:&lt;/span> filter p xs
&lt;span style="color:#666">|&lt;/span> otherwise &lt;span style="color:#a2f;font-weight:bold">=&lt;/span> filter p xs
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can define a tail-recursive version as follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-haskell" data-lang="haskell">&lt;span style="color:#00a000">filter&lt;/span> f xs &lt;span style="color:#a2f;font-weight:bold">=&lt;/span> filter&amp;#39; xs &lt;span style="color:#0b0;font-weight:bold">[]&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">where&lt;/span> filter&amp;#39; &lt;span style="color:#0b0;font-weight:bold">[]&lt;/span> rs &lt;span style="color:#a2f;font-weight:bold">=&lt;/span> reverse rs
filter&amp;#39; x&lt;span style="color:#0b0;font-weight:bold">:&lt;/span>xs rs
&lt;span style="color:#666">|&lt;/span> f x &lt;span style="color:#a2f;font-weight:bold">=&lt;/span> filter xs (x &lt;span style="color:#0b0;font-weight:bold">:&lt;/span>xs)
&lt;span style="color:#666">|&lt;/span> otherwise &lt;span style="color:#a2f;font-weight:bold">=&lt;/span> filter&amp;#39; xs rs
&lt;/code>&lt;/pre>&lt;/div>&lt;p>However, tail recursion imposes strictness, since only the very last call can
return something. This implementation thus fails for infinite lists (e.g. we
can&amp;rsquo;t &lt;code>take 10 (filter even [1..])&lt;/code>), which is generally undesirable.&lt;/p>
&lt;p>The same happens with the standard map:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-haskell" data-lang="haskell">&lt;span style="color:#00a000">map&lt;/span> f &lt;span style="color:#0b0;font-weight:bold">[]&lt;/span> &lt;span style="color:#a2f;font-weight:bold">=&lt;/span> &lt;span style="color:#0b0;font-weight:bold">[]&lt;/span>
&lt;span style="color:#00a000">map&lt;/span> f (x&lt;span style="color:#0b0;font-weight:bold">:&lt;/span>xs) &lt;span style="color:#a2f;font-weight:bold">=&lt;/span> f x &lt;span style="color:#0b0;font-weight:bold">:&lt;/span> map f xs
&lt;/code>&lt;/pre>&lt;/div>&lt;p>which may be defined tail-recursively as follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-haskell" data-lang="haskell">&lt;span style="color:#00a000">map&lt;/span> f (x&lt;span style="color:#0b0;font-weight:bold">:&lt;/span>xs) &lt;span style="color:#a2f;font-weight:bold">=&lt;/span> map&amp;#39; xs &lt;span style="color:#0b0;font-weight:bold">[]&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">where&lt;/span> map&amp;#39; &lt;span style="color:#0b0;font-weight:bold">[]&lt;/span> rs &lt;span style="color:#a2f;font-weight:bold">=&lt;/span> reverse rs
map&amp;#39; (x&lt;span style="color:#0b0;font-weight:bold">:&lt;/span>xs) rs &lt;span style="color:#a2f;font-weight:bold">=&lt;/span> map&amp;#39; xs (f x &lt;span style="color:#0b0;font-weight:bold">:&lt;/span> rs)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The second equation for &lt;code>map'&lt;/code> is clearly tail-recursive, and since reverse is
tail-recursive, the whole of &lt;code>map&lt;/code> is. This has, however, the same problem as
any tail-recursive function has: it prevents returning a partial result under
lazy evaluation.&lt;/p>
&lt;p>Note that &lt;code>foldl&lt;/code> is tail-recursive:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-haskell" data-lang="haskell">&lt;span style="color:#00a000">foldl&lt;/span> f e &lt;span style="color:#0b0;font-weight:bold">[]&lt;/span> &lt;span style="color:#a2f;font-weight:bold">=&lt;/span> e
&lt;span style="color:#00a000">foldl&lt;/span> f e (x&lt;span style="color:#0b0;font-weight:bold">:&lt;/span>xs) &lt;span style="color:#a2f;font-weight:bold">=&lt;/span> foldl f (f e x) xs
&lt;/code>&lt;/pre>&lt;/div>&lt;p>However, &lt;code>foldl&lt;/code> is discouraged in Haskell because even though it is
tail-recursive, its accumulating parameter isn&amp;rsquo;t evaluated before the recursive
call due to Haskell&amp;rsquo;s normal-order evaluation. For example, an execution of
&lt;code>foldl (+) 0 [1,2,3,4]&lt;/code> is as follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-haskell" data-lang="haskell"> foldl (&lt;span style="color:#666">+&lt;/span>) &lt;span style="color:#666">0&lt;/span> [&lt;span style="color:#666">1&lt;/span>,&lt;span style="color:#666">2&lt;/span>,&lt;span style="color:#666">3&lt;/span>,&lt;span style="color:#666">4&lt;/span>]
foldl (&lt;span style="color:#666">+&lt;/span>) (&lt;span style="color:#666">0&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#666">1&lt;/span>) [&lt;span style="color:#666">2&lt;/span>,&lt;span style="color:#666">3&lt;/span>,&lt;span style="color:#666">4&lt;/span>]
foldl (&lt;span style="color:#666">+&lt;/span>) ((&lt;span style="color:#666">0&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#666">1&lt;/span>) &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#666">2&lt;/span>) [&lt;span style="color:#666">3&lt;/span>,&lt;span style="color:#666">4&lt;/span>]
foldl (&lt;span style="color:#666">+&lt;/span>) (((&lt;span style="color:#666">0&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#666">1&lt;/span>) &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#666">2&lt;/span>) &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#666">3&lt;/span>) [&lt;span style="color:#666">4&lt;/span>]
foldl (&lt;span style="color:#666">+&lt;/span>) ((((&lt;span style="color:#666">0&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#666">1&lt;/span>) &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#666">2&lt;/span>) &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#666">3&lt;/span>) &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#666">4&lt;/span>) &lt;span style="color:#0b0;font-weight:bold">[]&lt;/span>
((((&lt;span style="color:#666">0&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#666">1&lt;/span>) &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#666">2&lt;/span>) &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#666">3&lt;/span>) &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#666">4&lt;/span>)
(((&lt;span style="color:#666">1&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#666">2&lt;/span>) &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#666">3&lt;/span>) &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#666">4&lt;/span>)
((&lt;span style="color:#666">3&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#666">3&lt;/span>) &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#666">4&lt;/span>)
(&lt;span style="color:#666">6&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#666">4&lt;/span>)
&lt;span style="color:#666">10&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As can be seen, thunks are created and kept in memory until the end of the list
is reached and they can start to be evaluated. This is unnecessarily costly,
can lead to stack overflows, and is contrary to what we would normally expect of a
tail-recursive call. That&amp;rsquo;s why there is &lt;code>foldl'&lt;/code>, a strict variant of &lt;code>foldl&lt;/code>
which forces evaluation of each thunk before recursing:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-haskell" data-lang="haskell"> foldl&amp;#39; (&lt;span style="color:#666">+&lt;/span>) &lt;span style="color:#666">0&lt;/span> [&lt;span style="color:#666">1&lt;/span>,&lt;span style="color:#666">2&lt;/span>,&lt;span style="color:#666">3&lt;/span>,&lt;span style="color:#666">4&lt;/span>]
foldl&amp;#39; (&lt;span style="color:#666">+&lt;/span>) (&lt;span style="color:#666">0&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#666">1&lt;/span>) [&lt;span style="color:#666">2&lt;/span>,&lt;span style="color:#666">3&lt;/span>,&lt;span style="color:#666">4&lt;/span>]
foldl&amp;#39; (&lt;span style="color:#666">+&lt;/span>) (&lt;span style="color:#666">1&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#666">2&lt;/span>) [&lt;span style="color:#666">3&lt;/span>,&lt;span style="color:#666">4&lt;/span>]
foldl&amp;#39; (&lt;span style="color:#666">+&lt;/span>) (&lt;span style="color:#666">3&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#666">3&lt;/span>) [&lt;span style="color:#666">4&lt;/span>]
foldl&amp;#39; (&lt;span style="color:#666">+&lt;/span>) (&lt;span style="color:#666">6&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#666">4&lt;/span>) &lt;span style="color:#0b0;font-weight:bold">[]&lt;/span>
&lt;span style="color:#666">10&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="comparison-of-two-factorial-implementations-in-c">Comparison of two factorial implementations in C&lt;/h2>
&lt;p>Given the two following simple definitions of a factorial function in C:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-C" data-lang="C">&lt;span style="color:#080;font-style:italic">/* tail-recursive-factorial.c */&lt;/span>
&lt;span style="color:#0b0;font-weight:bold">unsigned&lt;/span>
&lt;span style="color:#00a000">fact&lt;/span>(&lt;span style="color:#0b0;font-weight:bold">unsigned&lt;/span> n, &lt;span style="color:#0b0;font-weight:bold">unsigned&lt;/span> acc) {
&lt;span style="color:#a2f;font-weight:bold">if&lt;/span> (n &lt;span style="color:#666">=&lt;/span>&lt;span style="color:#666">=&lt;/span> &lt;span style="color:#666">0&lt;/span>)
&lt;span style="color:#a2f;font-weight:bold">return&lt;/span> acc;
&lt;span style="color:#a2f;font-weight:bold">return&lt;/span> fact(n &lt;span style="color:#666">-&lt;/span> &lt;span style="color:#666">1&lt;/span>, n &lt;span style="color:#666">*&lt;/span> acc);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-C" data-lang="C">&lt;span style="color:#080;font-style:italic">/* iterative-factorial.c */&lt;/span>
&lt;span style="color:#0b0;font-weight:bold">unsigned&lt;/span>
&lt;span style="color:#00a000">fact&lt;/span>(&lt;span style="color:#0b0;font-weight:bold">unsigned&lt;/span> n) {
&lt;span style="color:#0b0;font-weight:bold">unsigned&lt;/span> ret &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#666">1&lt;/span>;
&lt;span style="color:#a2f;font-weight:bold">while&lt;/span> (n &lt;span style="color:#666">!&lt;/span>&lt;span style="color:#666">=&lt;/span> &lt;span style="color:#666">0&lt;/span>) {
ret &lt;span style="color:#666">*&lt;/span>&lt;span style="color:#666">=&lt;/span> n&lt;span style="color:#666">-&lt;/span>&lt;span style="color:#666">-&lt;/span>;
}
&lt;span style="color:#a2f;font-weight:bold">return&lt;/span> ret;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Both are equivalent, provided we pass &lt;code>1&lt;/code> as the accumulating parameter when
calling the first one (that is, $5!$ would be &lt;code>fact(5, 1)&lt;/code>). The first function
is defined recursively, while the second one iteratively. One might mistakenly
assume the iterative one to be more efficient, but that doesn&amp;rsquo;t need to be the
case. As an example, after calling GCC (version 7.3.1) with &lt;code>-O2 -S&lt;/code> (to enable
optimizations, and generate assembly output), I get the following definitions of
&lt;code>fact&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-asm" data-lang="asm">&lt;span style="color:#080;font-style:italic"># iterative-factorial.s
&lt;/span>&lt;span style="color:#080;font-style:italic">&lt;/span>
&lt;span style="color:#a0a000">fact:&lt;/span>
&lt;span style="color:#a0a000">.LFB11:&lt;/span>
&lt;span style="color:#b44">.cfi_startproc&lt;/span>
&lt;span style="color:#00a000">test&lt;/span> &lt;span style="color:#800">edi&lt;/span>, &lt;span style="color:#800">edi&lt;/span> &lt;span style="color:#080;font-style:italic"># Test whether n == 0.
&lt;/span>&lt;span style="color:#080;font-style:italic">&lt;/span> &lt;span style="color:#800">mov&lt;/span> &lt;span style="color:#800">eax&lt;/span>, &lt;span style="color:#666">1&lt;/span> &lt;span style="color:#080;font-style:italic"># ret = 1;
&lt;/span>&lt;span style="color:#080;font-style:italic">&lt;/span> &lt;span style="color:#800">je&lt;/span> &lt;span style="color:#800">.L4&lt;/span> &lt;span style="color:#080;font-style:italic"># Go to .L4 if edi was 0
&lt;/span>&lt;span style="color:#080;font-style:italic">&lt;/span> &lt;span style="color:#800">.p2align&lt;/span> &lt;span style="color:#666">4&lt;/span>,,&lt;span style="color:#666">10&lt;/span>
&lt;span style="color:#b44">.p2align&lt;/span> &lt;span style="color:#666">3&lt;/span>
&lt;span style="color:#a0a000">.L3:&lt;/span>
&lt;span style="color:#00a000">imul&lt;/span> &lt;span style="color:#800">eax&lt;/span>, &lt;span style="color:#800">edi&lt;/span> &lt;span style="color:#080;font-style:italic"># ret *= n;
&lt;/span>&lt;span style="color:#080;font-style:italic">&lt;/span> &lt;span style="color:#800">sub&lt;/span> &lt;span style="color:#800">edi&lt;/span>, &lt;span style="color:#666">1&lt;/span> &lt;span style="color:#080;font-style:italic"># n--;
&lt;/span>&lt;span style="color:#080;font-style:italic">&lt;/span> &lt;span style="color:#800">jne&lt;/span> &lt;span style="color:#800">.L3&lt;/span> &lt;span style="color:#080;font-style:italic"># if n != 0, loop once more.
&lt;/span>&lt;span style="color:#080;font-style:italic">&lt;/span> &lt;span style="color:#800">rep&lt;/span> &lt;span style="color:#800">ret&lt;/span>
&lt;span style="color:#b44">.p2align&lt;/span> &lt;span style="color:#666">4&lt;/span>,,&lt;span style="color:#666">10&lt;/span>
&lt;span style="color:#b44">.p2align&lt;/span> &lt;span style="color:#666">3&lt;/span>
&lt;span style="color:#a0a000">.L4:&lt;/span>
&lt;span style="color:#b44">rep&lt;/span> &lt;span style="color:#00a000">ret&lt;/span>
&lt;span style="color:#b44">.cfi_endproc&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-asm" data-lang="asm">&lt;span style="color:#080;font-style:italic"># tail-recursive-factorial.s
&lt;/span>&lt;span style="color:#080;font-style:italic">&lt;/span>
&lt;span style="color:#a0a000">.LFB0:&lt;/span>
&lt;span style="color:#b44">.cfi_startproc&lt;/span>
&lt;span style="color:#00a000">test&lt;/span> &lt;span style="color:#800">edi&lt;/span>, &lt;span style="color:#800">edi&lt;/span>
&lt;span style="color:#00a000">mov&lt;/span> &lt;span style="color:#800">eax&lt;/span>, &lt;span style="color:#800">esi&lt;/span> &lt;span style="color:#080;font-style:italic"># store in eax the value of acc.
&lt;/span>&lt;span style="color:#080;font-style:italic">&lt;/span> &lt;span style="color:#800">je&lt;/span> &lt;span style="color:#800">.L5&lt;/span>
&lt;span style="color:#b44">.p2align&lt;/span> &lt;span style="color:#666">4&lt;/span>,,&lt;span style="color:#666">10&lt;/span>
&lt;span style="color:#b44">.p2align&lt;/span> &lt;span style="color:#666">3&lt;/span>
&lt;span style="color:#a0a000">.L2:&lt;/span>
&lt;span style="color:#00a000">imul&lt;/span> &lt;span style="color:#800">eax&lt;/span>, &lt;span style="color:#800">edi&lt;/span>
&lt;span style="color:#00a000">sub&lt;/span> &lt;span style="color:#800">edi&lt;/span>, &lt;span style="color:#666">1&lt;/span>
&lt;span style="color:#00a000">jne&lt;/span> &lt;span style="color:#800">.L2&lt;/span>
&lt;span style="color:#a0a000">.L5:&lt;/span>
&lt;span style="color:#b44">rep&lt;/span> &lt;span style="color:#00a000">ret&lt;/span>
&lt;span style="color:#b44">.cfi_endproc&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Aside from label differences, and some alignment instructions, both codes are
doing exactly the same: multiply eax and edi, decrease edi, and loop until edi
is 0.&lt;/p>
&lt;h2 id="final-remarks">Final remarks&lt;/h2>
&lt;p>A downside of tail-recursion is that, since the code is compiled into a loop,
there is no stack trace, which can be counterintuitive when debugging. This is
why python (purposely) doesn&amp;rsquo;t optimize tail-recursive calls.&lt;/p>
&lt;h2 id="references">References:&lt;/h2>
&lt;ol>
&lt;li>History of tail-call optimization (&lt;a href="https://erlang.org/pipermail/erlang-questions/2006-August/022055.html">https://erlang.org/pipermail/erlang-questions/2006-August/022055.html&lt;/a>)&lt;/li>
&lt;li>Structure and Interpretation of Computer Programs, p.35-36.&lt;/li>
&lt;li>&lt;a href="https://wiki.haskell.org/Fold">https://wiki.haskell.org/Fold&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mail.haskell.org/pipermail/haskell-cafe/2011-March/090237.html">https://mail.haskell.org/pipermail/haskell-cafe/2011-March/090237.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://neopythonic.blogspot.com.ar/2009/04/tail-recursion-elimination.html">http://neopythonic.blogspot.com.ar/2009/04/tail-recursion-elimination.html&lt;/a>&lt;/li>
&lt;/ol></description></item></channel></rss>