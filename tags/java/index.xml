<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on Cristian Ontivero</title><link>https://contivero.github.io/tags/java/</link><description>Recent content in Java on Cristian Ontivero</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 15 Aug 2022 08:00:00 +0200</lastBuildDate><atom:link href="https://contivero.github.io/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Thoughts on static methods</title><link>https://contivero.github.io/post/thoughts-on-static-methods/</link><pubDate>Mon, 15 Aug 2022 08:00:00 +0200</pubDate><guid>https://contivero.github.io/post/thoughts-on-static-methods/</guid><description>&lt;p>Methods that use no instance variables should be made static. Making the
method static restricts its possibilities, making it easier to reason about.
It&amp;rsquo;s more restricted in the sense that it&amp;rsquo;s impossible for it to mutate any
instance variable of the class where it&amp;rsquo;s defined. If it&amp;rsquo;s static:&lt;/p>
&lt;ol>
&lt;li>You know it doesn&amp;rsquo;t reference any state of the class where it&amp;rsquo;s
defined; it can&amp;rsquo;t.&lt;/li>
&lt;li>It&amp;rsquo;s highly likely it has no side-effect on the object where it&amp;rsquo;s defined.
Sure, it could be mutating some static field, but that would most likely be
terrible design, so one can usually discard that. It&amp;rsquo;s also possible that it
mutates state of one of its arguments, so the method need not be side-effect
free. But all that and more is possible with instance methods too.&lt;/li>
&lt;/ol>
&lt;p>All this information is also instantly accessible through the IDE, because it
uses italics for these methods, so when seeing the italics you know it&amp;rsquo;s some
utility method with those characteristics.&lt;/p>
&lt;p>It&amp;rsquo;s pointless to require instantiating an object to call a method that makes no
use of that object&amp;rsquo;s state (with the exception of methods meant to be
overriden).&lt;/p>
&lt;p>A lot of the time making a method static also reveals others can be static too
(those calling it), which can end up uncovering a set of methods that makes
sense to extract into a utility class.&lt;/p>
&lt;h2 id="exposing-temporal-coupling">Exposing temporal coupling&lt;/h2>
&lt;p>Static methods also make explicit any &lt;em>temporal coupling&lt;/em>. As a rough example,
say you have the following:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">SomeClass&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">final&lt;/span> Map&lt;span style="color:#666">&amp;lt;&lt;/span>String&lt;span style="color:#666">,&lt;/span> String&lt;span style="color:#666">&amp;gt;&lt;/span> map &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#a2f;font-weight:bold">new&lt;/span> HashMap&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">someMethod&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#080;font-style:italic">/* ... some code ... */&lt;/span>
computeMapEntries&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* ... a bunch of other code ... */&lt;/span>
doSomethingWithMap&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">computeMapEntries&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span> &lt;span style="color:#080;font-style:italic">/* something */&lt;/span> &lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">doSomethingWithMap&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span> &lt;span style="color:#080;font-style:italic">/* something */&lt;/span> &lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In such a code, having the map entries computed is a prerequisite for calling
&lt;code>doSomethingWithMap()&lt;/code>, which will use those values. There is thus a temporal
coupling between both methods, but this is nowhere specified nor enforced. It
could be that as part of future changes, someone reorders the calls and
introduces a bug. If, however, &lt;code>doSomethingWithMap()&lt;/code> took the map as a
parameter, then the dependency is made explicit. Assuming no other instance
field needs to be accessed, then &lt;code>doSomethingWithMap()&lt;/code> can be static, which
would enforce the dependency (the implementation cannot unexpectedly reference
the map nor any other such field). We might then be able also to avoid defining
&lt;code>map&lt;/code> as an instance variable entirely and instead declare it only inside
&lt;code>someMethod()&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">SomeClass&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">someMethod&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#080;font-style:italic">/* ... some code ... */&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">final&lt;/span> Map&lt;span style="color:#666">&amp;lt;&lt;/span>String&lt;span style="color:#666">,&lt;/span> String&lt;span style="color:#666">&amp;gt;&lt;/span> map &lt;span style="color:#666">=&lt;/span> computeMapEntries&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* ... a bunch of other code ... */&lt;/span>
doSomethingWithMap&lt;span style="color:#666">(&lt;/span>map&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> Map&lt;span style="color:#666">&amp;lt;&lt;/span>String&lt;span style="color:#666">,&lt;/span> String&lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#00a000">computeMapEntries&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span> &lt;span style="color:#080;font-style:italic">/* something */&lt;/span> &lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">doSomethingWithMap&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span> &lt;span style="color:#080;font-style:italic">/* something */&lt;/span> &lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>With this, we further reduced the scope of the variable, which helps to avoid
misuses, e.g. by having the IDE suggest it or auto-complete it in a place where
it wasn&amp;rsquo;t meant to be used. In particular, having:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">doSomethingWithMap&lt;span style="color:#666">(&lt;/span>map&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#080;font-style:italic">/* ... a bunch of other code ... */&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">final&lt;/span> Map&lt;span style="color:#666">&amp;lt;&lt;/span>String&lt;span style="color:#666">,&lt;/span> String&lt;span style="color:#666">&amp;gt;&lt;/span> map &lt;span style="color:#666">=&lt;/span> computeMapEntries&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>doesn&amp;rsquo;t compile anymore.&lt;/p>
&lt;h2 id="testability">Testability&lt;/h2>
&lt;p>Detractors of static methods sometimes argue that static methods worsen
testability as they cannot be overriden, and they are harder to mock (mocking
frameworks allow mocking static methods, with the downside that those tests
cannot be parallelized.) Why would one mock, for instance, &lt;code>Math.abs&lt;/code>? If the
method is &lt;a href="https://en.wikipedia.org/wiki/Pure_function">pure&lt;/a>, then that&amp;rsquo;s the
best case for testing: you can call the method with a bunch of inputs and assert
the outputs. If the static method uses some mutable dependency (for example a
database, or time such as with &lt;code>LocalDateTime.now()&lt;/code>), then I see why you&amp;rsquo;d want
to mock or somehow change that. But that&amp;rsquo;s because you are doing a bad usage of
a static method and should rethink your design (for instance, by using a
&lt;code>java.time.Clock&lt;/code> and calling &lt;code>LocalDateTime.now(clock)&lt;/code> instead). Also, mocks
should only be used for
&lt;a href="https://enterprisecraftsmanship.com/posts/when-to-mock/">shared, unmanaged out-of-process dependencies&lt;/a>,
and since these dependencies tend to be few, most of the time you actually
shouldn&amp;rsquo;t be mocking.&lt;/p>
&lt;h2 id="instance-vs-static-method">Instance vs. static method&lt;/h2>
&lt;p>All this doesn&amp;rsquo;t mean we should turn all private instance methods into private
static ones by adding each referenced instance field as an argument to the
method. After all, we can always change:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">AnotherClass&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#0b0;font-weight:bold">int&lt;/span> intField&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> String stringField&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> Service service&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">method&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#080;font-style:italic">/* uses intField, stringField and service */&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>into:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">public&lt;/span> &lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">AnotherClass&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#0b0;font-weight:bold">int&lt;/span> intField&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> String stringField&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> Service service&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">static&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">method&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#0b0;font-weight:bold">int&lt;/span> intField&lt;span style="color:#666">,&lt;/span> String stringField&lt;span style="color:#666">,&lt;/span> Service service&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#080;font-style:italic">/* uses intField, stringField and service */&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>and pass the arguments when calling &lt;code>method()&lt;/code>.&lt;/p>
&lt;p>When the referenced state is immutable (e.g. it&amp;rsquo;s a final field which
points to an stateless service initialized on construction), then taking it as
an argument instead of directly referencing it is pointless and more verbose.&lt;/p>
&lt;p>The same is true if the referenced state is always valid, for example when the
object is shared and has some feature flag:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#a2f;font-weight:bold">volatile&lt;/span> &lt;span style="color:#0b0;font-weight:bold">boolean&lt;/span> featureEnabled&lt;span style="color:#666">;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">private&lt;/span> &lt;span style="color:#0b0;font-weight:bold">void&lt;/span> &lt;span style="color:#00a000">setFeatureEnabled&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#0b0;font-weight:bold">boolean&lt;/span> featureEnabled&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">this&lt;/span>&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#b44">featureEnabled&lt;/span> &lt;span style="color:#666">=&lt;/span> featureEnabled
&lt;span style="color:#666">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then again, it makes sense to use the field directly in an instance method, as
both boolean states are valid (whether the feature is enabled or not is probably
something that some other thread defines).&lt;/p>
&lt;p>Another obvious case where we cannot make a method static&amp;mdash;even if no state is
used&amp;mdash;is when the method is meant to be overriden by subclasses.&lt;/p>
&lt;p>But these cases aside, I tend to make static any method that doesn&amp;rsquo;t depend on
an object&amp;rsquo;s state. The change can also be suggested, for instance, by Eclipse
(as a warning) or IntelliJ IDEA (as an inspection).&lt;/p></description></item></channel></rss>